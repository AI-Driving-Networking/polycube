/**
* lbrp API
* LoadBalancer Reverse-Proxy Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */


#include "LbrpApi.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

LbrpApi::LbrpApi() {
  setup_routes();
};

void LbrpApi::control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) {
  try {
    auto s = router.route(request, response);
    if (s == Rest::Router::Status::NotFound) {
      response.send(Http::Code::Not_Found);
    }
  } catch (const std::exception &e) {
    response.send(polycube::service::Http::Code::Bad_Request, e.what());
  }
}

void LbrpApi::setup_routes() {
  using namespace polycube::service::Rest;

  Routes::Post(router, base + ":name/", Routes::bind(&LbrpApi::create_lbrp_by_id_handler, this));
  Routes::Post(router, base + ":name/ports/:ports_name/", Routes::bind(&LbrpApi::create_lbrp_ports_by_id_handler, this));
  Routes::Post(router, base + ":name/ports/", Routes::bind(&LbrpApi::create_lbrp_ports_list_by_id_handler, this));
  Routes::Post(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/", Routes::bind(&LbrpApi::create_lbrp_service_backend_by_id_handler, this));
  Routes::Post(router, base + ":name/service/:vip/:vport/:proto/backend/", Routes::bind(&LbrpApi::create_lbrp_service_backend_list_by_id_handler, this));
  Routes::Post(router, base + ":name/service/:vip/:vport/:proto/", Routes::bind(&LbrpApi::create_lbrp_service_by_id_handler, this));
  Routes::Post(router, base + ":name/service/", Routes::bind(&LbrpApi::create_lbrp_service_list_by_id_handler, this));
  Routes::Post(router, base + ":name/src-ip-rewrite/", Routes::bind(&LbrpApi::create_lbrp_src_ip_rewrite_by_id_handler, this));
  Routes::Delete(router, base + ":name/", Routes::bind(&LbrpApi::delete_lbrp_by_id_handler, this));
  Routes::Delete(router, base + ":name/ports/:ports_name/", Routes::bind(&LbrpApi::delete_lbrp_ports_by_id_handler, this));
  Routes::Delete(router, base + ":name/ports/", Routes::bind(&LbrpApi::delete_lbrp_ports_list_by_id_handler, this));
  Routes::Delete(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/", Routes::bind(&LbrpApi::delete_lbrp_service_backend_by_id_handler, this));
  Routes::Delete(router, base + ":name/service/:vip/:vport/:proto/backend/", Routes::bind(&LbrpApi::delete_lbrp_service_backend_list_by_id_handler, this));
  Routes::Delete(router, base + ":name/service/:vip/:vport/:proto/", Routes::bind(&LbrpApi::delete_lbrp_service_by_id_handler, this));
  Routes::Delete(router, base + ":name/service/", Routes::bind(&LbrpApi::delete_lbrp_service_list_by_id_handler, this));
  Routes::Delete(router, base + ":name/src-ip-rewrite/", Routes::bind(&LbrpApi::delete_lbrp_src_ip_rewrite_by_id_handler, this));
  Routes::Get(router, base + ":name/", Routes::bind(&LbrpApi::read_lbrp_by_id_handler, this));
  Routes::Get(router, base + "", Routes::bind(&LbrpApi::read_lbrp_list_by_id_handler, this));
  Routes::Get(router, base + ":name/loglevel/", Routes::bind(&LbrpApi::read_lbrp_loglevel_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/", Routes::bind(&LbrpApi::read_lbrp_ports_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/", Routes::bind(&LbrpApi::read_lbrp_ports_list_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/peer/", Routes::bind(&LbrpApi::read_lbrp_ports_peer_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/status/", Routes::bind(&LbrpApi::read_lbrp_ports_status_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/type/", Routes::bind(&LbrpApi::read_lbrp_ports_type_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/uuid/", Routes::bind(&LbrpApi::read_lbrp_ports_uuid_by_id_handler, this));
  Routes::Get(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/", Routes::bind(&LbrpApi::read_lbrp_service_backend_by_id_handler, this));
  Routes::Get(router, base + ":name/service/:vip/:vport/:proto/backend/", Routes::bind(&LbrpApi::read_lbrp_service_backend_list_by_id_handler, this));
  Routes::Get(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/name/", Routes::bind(&LbrpApi::read_lbrp_service_backend_name_by_id_handler, this));
  Routes::Get(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/port/", Routes::bind(&LbrpApi::read_lbrp_service_backend_port_by_id_handler, this));
  Routes::Get(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/weight/", Routes::bind(&LbrpApi::read_lbrp_service_backend_weight_by_id_handler, this));
  Routes::Get(router, base + ":name/service/:vip/:vport/:proto/", Routes::bind(&LbrpApi::read_lbrp_service_by_id_handler, this));
  Routes::Get(router, base + ":name/service/", Routes::bind(&LbrpApi::read_lbrp_service_list_by_id_handler, this));
  Routes::Get(router, base + ":name/service/:vip/:vport/:proto/name/", Routes::bind(&LbrpApi::read_lbrp_service_name_by_id_handler, this));
  Routes::Get(router, base + ":name/src-ip-rewrite/", Routes::bind(&LbrpApi::read_lbrp_src_ip_rewrite_by_id_handler, this));
  Routes::Get(router, base + ":name/src-ip-rewrite/ip-range/", Routes::bind(&LbrpApi::read_lbrp_src_ip_rewrite_ip_range_by_id_handler, this));
  Routes::Get(router, base + ":name/src-ip-rewrite/new_ip_range/", Routes::bind(&LbrpApi::read_lbrp_src_ip_rewrite_new_ip_range_by_id_handler, this));
  Routes::Get(router, base + ":name/type/", Routes::bind(&LbrpApi::read_lbrp_type_by_id_handler, this));
  Routes::Get(router, base + ":name/uuid/", Routes::bind(&LbrpApi::read_lbrp_uuid_by_id_handler, this));
  Routes::Put(router, base + ":name/", Routes::bind(&LbrpApi::replace_lbrp_by_id_handler, this));
  Routes::Put(router, base + ":name/ports/:ports_name/", Routes::bind(&LbrpApi::replace_lbrp_ports_by_id_handler, this));
  Routes::Put(router, base + ":name/ports/", Routes::bind(&LbrpApi::replace_lbrp_ports_list_by_id_handler, this));
  Routes::Put(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/", Routes::bind(&LbrpApi::replace_lbrp_service_backend_by_id_handler, this));
  Routes::Put(router, base + ":name/service/:vip/:vport/:proto/backend/", Routes::bind(&LbrpApi::replace_lbrp_service_backend_list_by_id_handler, this));
  Routes::Put(router, base + ":name/service/:vip/:vport/:proto/", Routes::bind(&LbrpApi::replace_lbrp_service_by_id_handler, this));
  Routes::Put(router, base + ":name/service/", Routes::bind(&LbrpApi::replace_lbrp_service_list_by_id_handler, this));
  Routes::Put(router, base + ":name/src-ip-rewrite/", Routes::bind(&LbrpApi::replace_lbrp_src_ip_rewrite_by_id_handler, this));
  Routes::Patch(router, base + ":name/", Routes::bind(&LbrpApi::update_lbrp_by_id_handler, this));
  Routes::Patch(router, base + "", Routes::bind(&LbrpApi::update_lbrp_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/loglevel/", Routes::bind(&LbrpApi::update_lbrp_loglevel_by_id_handler, this));
  Routes::Patch(router, base + ":name/ports/:ports_name/", Routes::bind(&LbrpApi::update_lbrp_ports_by_id_handler, this));
  Routes::Patch(router, base + ":name/ports/", Routes::bind(&LbrpApi::update_lbrp_ports_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/ports/:ports_name/peer/", Routes::bind(&LbrpApi::update_lbrp_ports_peer_by_id_handler, this));
  Routes::Patch(router, base + ":name/ports/:ports_name/type/", Routes::bind(&LbrpApi::update_lbrp_ports_type_by_id_handler, this));
  Routes::Patch(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/", Routes::bind(&LbrpApi::update_lbrp_service_backend_by_id_handler, this));
  Routes::Patch(router, base + ":name/service/:vip/:vport/:proto/backend/", Routes::bind(&LbrpApi::update_lbrp_service_backend_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/name/", Routes::bind(&LbrpApi::update_lbrp_service_backend_name_by_id_handler, this));
  Routes::Patch(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/port/", Routes::bind(&LbrpApi::update_lbrp_service_backend_port_by_id_handler, this));
  Routes::Patch(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/weight/", Routes::bind(&LbrpApi::update_lbrp_service_backend_weight_by_id_handler, this));
  Routes::Patch(router, base + ":name/service/:vip/:vport/:proto/", Routes::bind(&LbrpApi::update_lbrp_service_by_id_handler, this));
  Routes::Patch(router, base + ":name/service/", Routes::bind(&LbrpApi::update_lbrp_service_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/service/:vip/:vport/:proto/name/", Routes::bind(&LbrpApi::update_lbrp_service_name_by_id_handler, this));
  Routes::Patch(router, base + ":name/src-ip-rewrite/", Routes::bind(&LbrpApi::update_lbrp_src_ip_rewrite_by_id_handler, this));
  Routes::Patch(router, base + ":name/src-ip-rewrite/ip-range/", Routes::bind(&LbrpApi::update_lbrp_src_ip_rewrite_ip_range_by_id_handler, this));
  Routes::Patch(router, base + ":name/src-ip-rewrite/new_ip_range/", Routes::bind(&LbrpApi::update_lbrp_src_ip_rewrite_new_ip_range_by_id_handler, this));

  Routes::Options(router, base + ":name/", Routes::bind(&LbrpApi::read_lbrp_by_id_help, this));
  Routes::Options(router, base + "", Routes::bind(&LbrpApi::read_lbrp_list_by_id_help, this));
  Routes::Options(router, base + ":name/ports/:ports_name/", Routes::bind(&LbrpApi::read_lbrp_ports_by_id_help, this));
  Routes::Options(router, base + ":name/ports/", Routes::bind(&LbrpApi::read_lbrp_ports_list_by_id_help, this));
  Routes::Options(router, base + ":name/service/:vip/:vport/:proto/backend/:ip/", Routes::bind(&LbrpApi::read_lbrp_service_backend_by_id_help, this));
  Routes::Options(router, base + ":name/service/:vip/:vport/:proto/backend/", Routes::bind(&LbrpApi::read_lbrp_service_backend_list_by_id_help, this));
  Routes::Options(router, base + ":name/service/:vip/:vport/:proto/", Routes::bind(&LbrpApi::read_lbrp_service_by_id_help, this));
  Routes::Options(router, base + ":name/service/", Routes::bind(&LbrpApi::read_lbrp_service_list_by_id_help, this));
  Routes::Options(router, base + ":name/src-ip-rewrite/", Routes::bind(&LbrpApi::read_lbrp_src_ip_rewrite_by_id_help, this));

}

void LbrpApi::create_lbrp_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    LbrpJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(name);
    value.validateMandatoryFields();
    value.validateParams();
    create_lbrp_by_id(name, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::create_lbrp_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    PortsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(portsName);
    value.validateMandatoryFields();
    value.validateParams();
    create_lbrp_ports_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::create_lbrp_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<PortsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      PortsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    create_lbrp_ports_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::create_lbrp_service_backend_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {
    // Getting the body param
    ServiceBackendJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setIp(ip);
    value.validateMandatoryFields();
    value.validateParams();
    create_lbrp_service_backend_by_id(name, vip, vport, proto_, ip, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::create_lbrp_service_backend_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);

  // Getting the body param
  std::vector<ServiceBackendJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      ServiceBackendJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    create_lbrp_service_backend_list_by_id(name, vip, vport, proto_, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::create_lbrp_service_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  try {
    // Getting the body param
    ServiceJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setVip(vip);
    value.setVport(vport);
    value.setProto(proto_);
    value.validateMandatoryFields();
    value.validateParams();
    create_lbrp_service_by_id(name, vip, vport, proto_, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::create_lbrp_service_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<ServiceJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      ServiceJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    create_lbrp_service_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::create_lbrp_src_ip_rewrite_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    SrcIpRewriteJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.validateMandatoryFields();
    value.validateParams();
    create_lbrp_src_ip_rewrite_by_id(name, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::delete_lbrp_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {

    delete_lbrp_by_id(name);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::delete_lbrp_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {

    delete_lbrp_ports_by_id(name, portsName);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::delete_lbrp_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {

    delete_lbrp_ports_list_by_id(name);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::delete_lbrp_service_backend_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {

    delete_lbrp_service_backend_by_id(name, vip, vport, proto_, ip);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::delete_lbrp_service_backend_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  try {

    delete_lbrp_service_backend_list_by_id(name, vip, vport, proto_);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::delete_lbrp_service_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  try {

    delete_lbrp_service_by_id(name, vip, vport, proto_);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::delete_lbrp_service_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {

    delete_lbrp_service_list_by_id(name);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::delete_lbrp_src_ip_rewrite_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {

    delete_lbrp_src_ip_rewrite_by_id(name);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_lbrp_by_id(name);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {


  try {


    auto x = read_lbrp_list_by_id();
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_loglevel_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_lbrp_loglevel_by_id(name);
    nlohmann::json response_body;
    response_body = LbrpJsonObject::LbrpLoglevelEnum_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_lbrp_ports_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_lbrp_ports_list_by_id(name);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_ports_peer_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_lbrp_ports_peer_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_ports_status_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_lbrp_ports_status_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = PortsJsonObject::PortsStatusEnum_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_ports_type_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_lbrp_ports_type_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = PortsJsonObject::PortsTypeEnum_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_ports_uuid_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_lbrp_ports_uuid_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_service_backend_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {


    auto x = read_lbrp_service_backend_by_id(name, vip, vport, proto_, ip);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_service_backend_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  try {


    auto x = read_lbrp_service_backend_list_by_id(name, vip, vport, proto_);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_service_backend_name_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {


    auto x = read_lbrp_service_backend_name_by_id(name, vip, vport, proto_, ip);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_service_backend_port_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {


    auto x = read_lbrp_service_backend_port_by_id(name, vip, vport, proto_, ip);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_service_backend_weight_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {


    auto x = read_lbrp_service_backend_weight_by_id(name, vip, vport, proto_, ip);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_service_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  try {


    auto x = read_lbrp_service_by_id(name, vip, vport, proto_);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_service_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_lbrp_service_list_by_id(name);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_service_name_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  try {


    auto x = read_lbrp_service_name_by_id(name, vip, vport, proto_);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_src_ip_rewrite_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_lbrp_src_ip_rewrite_by_id(name);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_src_ip_rewrite_ip_range_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_lbrp_src_ip_rewrite_ip_range_by_id(name);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_src_ip_rewrite_new_ip_range_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_lbrp_src_ip_rewrite_new_ip_range_by_id(name);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_type_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_lbrp_type_by_id(name);
    nlohmann::json response_body;
    response_body = LbrpJsonObject::CubeType_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::read_lbrp_uuid_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_lbrp_uuid_by_id(name);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::replace_lbrp_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    LbrpJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(name);
    value.validateMandatoryFields();
    value.validateParams();
    replace_lbrp_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::replace_lbrp_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    PortsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(portsName);
    value.validateMandatoryFields();
    value.validateParams();
    replace_lbrp_ports_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::replace_lbrp_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<PortsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      PortsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    replace_lbrp_ports_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::replace_lbrp_service_backend_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {
    // Getting the body param
    ServiceBackendJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setIp(ip);
    value.validateMandatoryFields();
    value.validateParams();
    replace_lbrp_service_backend_by_id(name, vip, vport, proto_, ip, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::replace_lbrp_service_backend_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);

  // Getting the body param
  std::vector<ServiceBackendJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      ServiceBackendJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    replace_lbrp_service_backend_list_by_id(name, vip, vport, proto_, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::replace_lbrp_service_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  try {
    // Getting the body param
    ServiceJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setVip(vip);
    value.setVport(vport);
    value.setProto(proto_);
    value.validateMandatoryFields();
    value.validateParams();
    replace_lbrp_service_by_id(name, vip, vport, proto_, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::replace_lbrp_service_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<ServiceJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      ServiceJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    replace_lbrp_service_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::replace_lbrp_src_ip_rewrite_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    SrcIpRewriteJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.validateMandatoryFields();
    value.validateParams();
    replace_lbrp_src_ip_rewrite_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    LbrpJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(name);
    value.validateParams();
    update_lbrp_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {

  // Getting the body param
  std::vector<LbrpJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      LbrpJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateParams();
      value.push_back(a);
    }
    update_lbrp_list_by_id(value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_loglevel_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    LbrpLoglevelEnum value_;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value_ = LbrpJsonObject::string_to_LbrpLoglevelEnum(request_body);
    update_lbrp_loglevel_by_id(name, value_);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    PortsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(portsName);
    value.validateParams();
    update_lbrp_ports_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<PortsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      PortsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateParams();
      value.push_back(a);
    }
    update_lbrp_ports_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_ports_peer_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_lbrp_ports_peer_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_ports_type_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    PortsTypeEnum value_;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value_ = PortsJsonObject::string_to_PortsTypeEnum(request_body);
    update_lbrp_ports_type_by_id(name, portsName, value_);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_service_backend_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {
    // Getting the body param
    ServiceBackendJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setIp(ip);
    value.validateParams();
    update_lbrp_service_backend_by_id(name, vip, vport, proto_, ip, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_service_backend_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);

  // Getting the body param
  std::vector<ServiceBackendJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      ServiceBackendJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateParams();
      value.push_back(a);
    }
    update_lbrp_service_backend_list_by_id(name, vip, vport, proto_, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_service_backend_name_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_lbrp_service_backend_name_by_id(name, vip, vport, proto_, ip, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_service_backend_port_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {
    // Getting the body param
    uint16_t value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_lbrp_service_backend_port_by_id(name, vip, vport, proto_, ip, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_service_backend_weight_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  try {
    // Getting the body param
    uint16_t value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_lbrp_service_backend_weight_by_id(name, vip, vport, proto_, ip, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_service_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  try {
    // Getting the body param
    ServiceJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setVip(vip);
    value.setVport(vport);
    value.setProto(proto_);
    value.validateParams();
    update_lbrp_service_by_id(name, vip, vport, proto_, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_service_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<ServiceJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      ServiceJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateParams();
      value.push_back(a);
    }
    update_lbrp_service_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_service_name_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_lbrp_service_name_by_id(name, vip, vport, proto_, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_src_ip_rewrite_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    SrcIpRewriteJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.validateParams();
    update_lbrp_src_ip_rewrite_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_src_ip_rewrite_ip_range_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_lbrp_src_ip_rewrite_ip_range_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void LbrpApi::update_lbrp_src_ip_rewrite_new_ip_range_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_lbrp_src_ip_rewrite_new_ip_range_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}

void LbrpApi::read_lbrp_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = LbrpJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = LbrpJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = LbrpJsonObject::helpComplexElements();
    val["actions"] = LbrpJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void LbrpApi::read_lbrp_list_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = LbrpJsonObject::helpKeys();
    val["elements"] = read_lbrp_list_by_id_get_list();
  break;

  case HelpType::ADD:
    val["params"] = LbrpJsonObject::helpKeys();
    val["optional-params"] = LbrpJsonObject::helpWritableLeafs();
  break;

  case HelpType::SET:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::DEL:
    val["params"] = LbrpJsonObject::helpKeys();
    val["elements"] = read_lbrp_list_by_id_get_list();
  break;

  case HelpType::NONE:
    val["commands"] = {"add", "del", "show"};
    val["params"] = LbrpJsonObject::helpKeys();
    val["elements"] = read_lbrp_list_by_id_get_list();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void LbrpApi::read_lbrp_ports_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = PortsJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = PortsJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = PortsJsonObject::helpComplexElements();
    val["actions"] = PortsJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void LbrpApi::read_lbrp_ports_list_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = PortsJsonObject::helpKeys();
    val["elements"] = read_lbrp_ports_list_by_id_get_list(name);
  break;

  case HelpType::ADD:
    val["params"] = PortsJsonObject::helpKeys();
    val["optional-params"] = PortsJsonObject::helpWritableLeafs();
  break;

  case HelpType::SET:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::DEL:
    val["params"] = PortsJsonObject::helpKeys();
    val["elements"] = read_lbrp_ports_list_by_id_get_list(name);
  break;

  case HelpType::NONE:
    val["commands"] = {"add", "del", "show"};
    val["params"] = PortsJsonObject::helpKeys();
    val["elements"] = read_lbrp_ports_list_by_id_get_list(name);
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void LbrpApi::read_lbrp_service_backend_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);
  auto ip = request.param(":ip").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = ServiceBackendJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = ServiceBackendJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = ServiceBackendJsonObject::helpComplexElements();
    val["actions"] = ServiceBackendJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void LbrpApi::read_lbrp_service_backend_list_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = ServiceBackendJsonObject::helpKeys();
    val["elements"] = read_lbrp_service_backend_list_by_id_get_list(name, vip, vport, proto_);
  break;

  case HelpType::ADD:
    val["params"] = ServiceBackendJsonObject::helpKeys();
    val["optional-params"] = ServiceBackendJsonObject::helpWritableLeafs();
  break;

  case HelpType::SET:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::DEL:
    val["params"] = ServiceBackendJsonObject::helpKeys();
    val["elements"] = read_lbrp_service_backend_list_by_id_get_list(name, vip, vport, proto_);
  break;

  case HelpType::NONE:
    val["commands"] = {"add", "del", "show"};
    val["params"] = ServiceBackendJsonObject::helpKeys();
    val["elements"] = read_lbrp_service_backend_list_by_id_get_list(name, vip, vport, proto_);
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void LbrpApi::read_lbrp_service_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto vip = request.param(":vip").as<std::string>();
  auto vport = request.param(":vport").as<uint16_t>();
  auto proto = request.param(":proto").as<std::string>();
  auto proto_ = ServiceJsonObject::string_to_ServiceProtoEnum(proto);


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = ServiceJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = ServiceJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = ServiceJsonObject::helpComplexElements();
    val["actions"] = ServiceJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void LbrpApi::read_lbrp_service_list_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = ServiceJsonObject::helpKeys();
    val["elements"] = read_lbrp_service_list_by_id_get_list(name);
  break;

  case HelpType::ADD:
    val["params"] = ServiceJsonObject::helpKeys();
    val["optional-params"] = ServiceJsonObject::helpWritableLeafs();
  break;

  case HelpType::SET:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::DEL:
    val["params"] = ServiceJsonObject::helpKeys();
    val["elements"] = read_lbrp_service_list_by_id_get_list(name);
  break;

  case HelpType::NONE:
    val["commands"] = {"add", "del", "show"};
    val["params"] = ServiceJsonObject::helpKeys();
    val["elements"] = read_lbrp_service_list_by_id_get_list(name);
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void LbrpApi::read_lbrp_src_ip_rewrite_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = SrcIpRewriteJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = SrcIpRewriteJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = SrcIpRewriteJsonObject::helpComplexElements();
    val["actions"] = SrcIpRewriteJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}



}
}
}
}

