/**
* lbrp API
* LoadBalancer Reverse-Proxy Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


// These methods have a default implementation. Your are free to keep it or add your own


#include "../Lbrp.h"




std::string Lbrp::getName(){
  // This method retrieves the name value.
  return Cube::get_name();
}


std::string Lbrp::getUuid(){
  // This method retrieves the uuid value.
  return Cube::get_uuid().str();
}


CubeType Lbrp::getType(){
  // This method retrieves the type value.
  return Cube::get_type();
}


LbrpLoglevelEnum Lbrp::getLoglevel(){
  // This method retrieves the loglevel value.
    switch(Cube::get_log_level()){
      case polycube::LogLevel::TRACE:
        return LbrpLoglevelEnum::TRACE;
      case polycube::LogLevel::DEBUG:
        return LbrpLoglevelEnum::DEBUG;
      case polycube::LogLevel::INFO:
        return LbrpLoglevelEnum::INFO;
      case polycube::LogLevel::WARN:
        return LbrpLoglevelEnum::WARN;
      case polycube::LogLevel::ERR:
        return LbrpLoglevelEnum::ERR;
      case polycube::LogLevel::CRITICAL:
        return LbrpLoglevelEnum::CRITICAL;
      case polycube::LogLevel::OFF:
        return LbrpLoglevelEnum::OFF;
    }
}

void Lbrp::setLoglevel(const LbrpLoglevelEnum &value){
  // This method sets the loglevel value.
    switch(value){
      case LbrpLoglevelEnum::TRACE:
        Cube::set_log_level(polycube::LogLevel::TRACE);
        break;
      case LbrpLoglevelEnum::DEBUG:
        Cube::set_log_level(polycube::LogLevel::DEBUG);
        break;
      case LbrpLoglevelEnum::INFO:
        Cube::set_log_level(polycube::LogLevel::INFO);
        break;
      case LbrpLoglevelEnum::WARN:
        Cube::set_log_level(polycube::LogLevel::WARN);
        break;
      case LbrpLoglevelEnum::ERR:
        Cube::set_log_level(polycube::LogLevel::ERR);
        break;
      case LbrpLoglevelEnum::CRITICAL:
        Cube::set_log_level(polycube::LogLevel::CRITICAL);
        break;
      case LbrpLoglevelEnum::OFF:
        Cube::set_log_level(polycube::LogLevel::OFF);
        break;
    }
}

std::shared_ptr<Ports> Lbrp::getPorts(const std::string &name){
  return Ports::getEntry(*this, name);
}

std::vector<std::shared_ptr<Ports>> Lbrp::getPortsList(){
  return Ports::get(*this);
}

void Lbrp::addPorts(const std::string &name, const PortsJsonObject &conf){
  Ports::create(*this, name, conf);
}

void Lbrp::addPortsList(const std::vector<PortsJsonObject> &conf){
  for(auto &i : conf){
    std::string name_ = i.getName();
    Ports::create(*this, name_,  i);
  }
}

void Lbrp::replacePorts(const std::string &name, const PortsJsonObject &conf){
  Ports::removeEntry(*this, name);
  std::string name_ = conf.getName();
  Ports::create(*this, name_, conf);

}

void Lbrp::delPorts(const std::string &name){
  Ports::removeEntry(*this, name);
}

void Lbrp::delPortsList(){
  Ports::remove(*this);
}

std::shared_ptr<SrcIpRewrite> Lbrp::getSrcIpRewrite(){
  return SrcIpRewrite::getEntry(*this);
}

void Lbrp::addSrcIpRewrite(const SrcIpRewriteJsonObject &value){
  SrcIpRewrite::create(*this, value);
}

void Lbrp::replaceSrcIpRewrite(const SrcIpRewriteJsonObject &conf){
  SrcIpRewrite::removeEntry(*this);
  SrcIpRewrite::create(*this, conf);
}

void Lbrp::delSrcIpRewrite(){
  SrcIpRewrite::removeEntry(*this);
}


std::shared_ptr<Service> Lbrp::getService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto){
  return Service::getEntry(*this, vip, vport, proto);
}

std::vector<std::shared_ptr<Service>> Lbrp::getServiceList(){
  return Service::get(*this);
}

void Lbrp::addService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &conf){
  Service::create(*this, vip, vport, proto, conf);
}

void Lbrp::addServiceList(const std::vector<ServiceJsonObject> &conf){
  for(auto &i : conf){
    std::string vip_ = i.getVip();
    uint16_t vport_ = i.getVport();
    ServiceProtoEnum proto_ = i.getProto();
    Service::create(*this, vip_, vport_, proto_,  i);
  }
}

void Lbrp::replaceService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &conf){
  Service::removeEntry(*this, vip, vport, proto);
  std::string vip_ = conf.getVip();
  uint16_t vport_ = conf.getVport();
  ServiceProtoEnum proto_ = conf.getProto();
  Service::create(*this, vip_, vport_, proto_, conf);

}

void Lbrp::delService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto){
  Service::removeEntry(*this, vip, vport, proto);
}

void Lbrp::delServiceList(){
  Service::remove(*this);
}



