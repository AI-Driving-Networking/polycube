/**
* k8sfilter API
* Kubernetes Traffic Filtering Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


// These methods have a default implementation. Your are free to keep it or add your own


#include "../K8sfilter.h"




std::string K8sfilter::getName(){
  // This method retrieves the name value.
  return Cube::get_name();
}


std::string K8sfilter::getUuid(){
  // This method retrieves the uuid value.
  return Cube::get_uuid().str();
}


CubeType K8sfilter::getType(){
  // This method retrieves the type value.
  return Cube::get_type();
}


K8sfilterLoglevelEnum K8sfilter::getLoglevel(){
  // This method retrieves the loglevel value.
    switch(Cube::get_log_level()){
      case polycube::LogLevel::TRACE:
        return K8sfilterLoglevelEnum::TRACE;
      case polycube::LogLevel::DEBUG:
        return K8sfilterLoglevelEnum::DEBUG;
      case polycube::LogLevel::INFO:
        return K8sfilterLoglevelEnum::INFO;
      case polycube::LogLevel::WARN:
        return K8sfilterLoglevelEnum::WARN;
      case polycube::LogLevel::ERR:
        return K8sfilterLoglevelEnum::ERR;
      case polycube::LogLevel::CRITICAL:
        return K8sfilterLoglevelEnum::CRITICAL;
      case polycube::LogLevel::OFF:
        return K8sfilterLoglevelEnum::OFF;
    }
}

void K8sfilter::setLoglevel(const K8sfilterLoglevelEnum &value){
  // This method sets the loglevel value.
    switch(value){
      case K8sfilterLoglevelEnum::TRACE:
        Cube::set_log_level(polycube::LogLevel::TRACE);
        break;
      case K8sfilterLoglevelEnum::DEBUG:
        Cube::set_log_level(polycube::LogLevel::DEBUG);
        break;
      case K8sfilterLoglevelEnum::INFO:
        Cube::set_log_level(polycube::LogLevel::INFO);
        break;
      case K8sfilterLoglevelEnum::WARN:
        Cube::set_log_level(polycube::LogLevel::WARN);
        break;
      case K8sfilterLoglevelEnum::ERR:
        Cube::set_log_level(polycube::LogLevel::ERR);
        break;
      case K8sfilterLoglevelEnum::CRITICAL:
        Cube::set_log_level(polycube::LogLevel::CRITICAL);
        break;
      case K8sfilterLoglevelEnum::OFF:
        Cube::set_log_level(polycube::LogLevel::OFF);
        break;
    }
}

std::shared_ptr<Ports> K8sfilter::getPorts(const std::string &name){
  return Ports::getEntry(*this, name);
}

std::vector<std::shared_ptr<Ports>> K8sfilter::getPortsList(){
  return Ports::get(*this);
}

void K8sfilter::addPorts(const std::string &name, const PortsJsonObject &conf){
  Ports::create(*this, name, conf);
}

void K8sfilter::addPortsList(const std::vector<PortsJsonObject> &conf){
  for(auto &i : conf){
    std::string name_ = i.getName();
    Ports::create(*this, name_,  i);
  }
}

void K8sfilter::replacePorts(const std::string &name, const PortsJsonObject &conf){
  Ports::removeEntry(*this, name);
  std::string name_ = conf.getName();
  Ports::create(*this, name_, conf);

}

void K8sfilter::delPorts(const std::string &name){
  Ports::removeEntry(*this, name);
}

void K8sfilter::delPortsList(){
  Ports::remove(*this);
}




