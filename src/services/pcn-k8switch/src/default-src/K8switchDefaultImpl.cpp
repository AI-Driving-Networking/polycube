/**
* k8switch API
* Kubernetes HyperSwitch Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


// These methods have a default implementation. Your are free to keep it or add your own


#include "../K8switch.h"




std::string K8switch::getName(){
  // This method retrieves the name value.
  return Cube::get_name();
}


std::string K8switch::getUuid(){
  // This method retrieves the uuid value.
  return Cube::get_uuid().str();
}


CubeType K8switch::getType(){
  // This method retrieves the type value.
  return Cube::get_type();
}


K8switchLoglevelEnum K8switch::getLoglevel(){
  // This method retrieves the loglevel value.
    switch(Cube::get_log_level()){
      case polycube::LogLevel::TRACE:
        return K8switchLoglevelEnum::TRACE;
      case polycube::LogLevel::DEBUG:
        return K8switchLoglevelEnum::DEBUG;
      case polycube::LogLevel::INFO:
        return K8switchLoglevelEnum::INFO;
      case polycube::LogLevel::WARN:
        return K8switchLoglevelEnum::WARN;
      case polycube::LogLevel::ERR:
        return K8switchLoglevelEnum::ERR;
      case polycube::LogLevel::CRITICAL:
        return K8switchLoglevelEnum::CRITICAL;
      case polycube::LogLevel::OFF:
        return K8switchLoglevelEnum::OFF;
    }
}

void K8switch::setLoglevel(const K8switchLoglevelEnum &value){
  // This method sets the loglevel value.
    switch(value){
      case K8switchLoglevelEnum::TRACE:
        Cube::set_log_level(polycube::LogLevel::TRACE);
        break;
      case K8switchLoglevelEnum::DEBUG:
        Cube::set_log_level(polycube::LogLevel::DEBUG);
        break;
      case K8switchLoglevelEnum::INFO:
        Cube::set_log_level(polycube::LogLevel::INFO);
        break;
      case K8switchLoglevelEnum::WARN:
        Cube::set_log_level(polycube::LogLevel::WARN);
        break;
      case K8switchLoglevelEnum::ERR:
        Cube::set_log_level(polycube::LogLevel::ERR);
        break;
      case K8switchLoglevelEnum::CRITICAL:
        Cube::set_log_level(polycube::LogLevel::CRITICAL);
        break;
      case K8switchLoglevelEnum::OFF:
        Cube::set_log_level(polycube::LogLevel::OFF);
        break;
    }
}

std::shared_ptr<Ports> K8switch::getPorts(const std::string &name){
  return Ports::getEntry(*this, name);
}

std::vector<std::shared_ptr<Ports>> K8switch::getPortsList(){
  return Ports::get(*this);
}

void K8switch::addPorts(const std::string &name, const PortsJsonObject &conf){
  Ports::create(*this, name, conf);
}

void K8switch::addPortsList(const std::vector<PortsJsonObject> &conf){
  for(auto &i : conf){
    std::string name_ = i.getName();
    Ports::create(*this, name_,  i);
  }
}

void K8switch::replacePorts(const std::string &name, const PortsJsonObject &conf){
  Ports::removeEntry(*this, name);
  std::string name_ = conf.getName();
  Ports::create(*this, name_, conf);

}

void K8switch::delPorts(const std::string &name){
  Ports::removeEntry(*this, name);
}

void K8switch::delPortsList(){
  Ports::remove(*this);
}

std::shared_ptr<FwdTable> K8switch::getFwdTable(const std::string &address){
  return FwdTable::getEntry(*this, address);
}

std::vector<std::shared_ptr<FwdTable>> K8switch::getFwdTableList(){
  return FwdTable::get(*this);
}

void K8switch::addFwdTable(const std::string &address, const FwdTableJsonObject &conf){
  FwdTable::create(*this, address, conf);
}

void K8switch::addFwdTableList(const std::vector<FwdTableJsonObject> &conf){
  for(auto &i : conf){
    std::string address_ = i.getAddress();
    FwdTable::create(*this, address_,  i);
  }
}

void K8switch::replaceFwdTable(const std::string &address, const FwdTableJsonObject &conf){
  FwdTable::removeEntry(*this, address);
  std::string address_ = conf.getAddress();
  FwdTable::create(*this, address_, conf);

}

void K8switch::delFwdTable(const std::string &address){
  FwdTable::removeEntry(*this, address);
}

void K8switch::delFwdTableList(){
  FwdTable::remove(*this);
}



