/**
* k8switch API
* Kubernetes HyperSwitch Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "FwdTableJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

FwdTableJsonObject::FwdTableJsonObject() {

  m_addressIsSet = false;

  m_macIsSet = false;

  m_portIsSet = false;
}

FwdTableJsonObject::~FwdTableJsonObject() {}

void FwdTableJsonObject::validateKeys() {

  if (!m_addressIsSet) {
    throw std::runtime_error("Variable address is required");
  }
}

void FwdTableJsonObject::validateMandatoryFields() {

  if (!m_macIsSet) {
    throw std::runtime_error("Variable mac is required");
  }
  if (!m_portIsSet) {
    throw std::runtime_error("Variable port is required");
  }
}

void FwdTableJsonObject::validateParams() {

}

nlohmann::json FwdTableJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_addressIsSet) {
    val["address"] = m_address;
  }

  val["mac"] = m_mac;
  val["port"] = m_port;

  return val;
}

void FwdTableJsonObject::fromJson(nlohmann::json& val) {
  for(nlohmann::json::iterator it = val.begin(); it != val.end(); ++it) {
    std::string key = it.key();
    bool found = (std::find(allowedParameters_.begin(), allowedParameters_.end(), key) != allowedParameters_.end());
    if (!found) {
      throw std::runtime_error(key + " is not a valid parameter");
      return;
    }
  }

  if (val.find("address") != val.end()) {
    setAddress(val.at("address"));
  }

  if (val.find("mac") != val.end()) {
    setMac(val.at("mac"));
  }

  if (val.find("port") != val.end()) {
    setPort(val.at("port"));
  }
}

nlohmann::json FwdTableJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["address"]["name"] = "address";
  val["address"]["type"] = "key";
  val["address"]["simpletype"] = "string";
  val["address"]["description"] = R"POLYCUBE(Destination IP address)POLYCUBE";
  val["address"]["example"] = R"POLYCUBE(123.13.34.0)POLYCUBE";

  return val;
}

nlohmann::json FwdTableJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["mac"]["name"] = "mac";
  val["mac"]["type"] = "leaf"; // Suppose that type is leaf
  val["mac"]["simpletype"] = "string";
  val["mac"]["description"] = R"POLYCUBE(Destination MAC address)POLYCUBE";
  val["mac"]["example"] = R"POLYCUBE(C5:13:2D:36:27:9B)POLYCUBE";
  val["port"]["name"] = "port";
  val["port"]["type"] = "leaf"; // Suppose that type is leaf
  val["port"]["simpletype"] = "string";
  val["port"]["description"] = R"POLYCUBE(Port where this entry is present)POLYCUBE";
  val["port"]["example"] = R"POLYCUBE(port1)POLYCUBE";

  return val;
}

nlohmann::json FwdTableJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["mac"]["name"] = "mac";
  val["mac"]["simpletype"] = "string";
  val["mac"]["description"] = R"POLYCUBE(Destination MAC address)POLYCUBE";
  val["mac"]["example"] = R"POLYCUBE(C5:13:2D:36:27:9B)POLYCUBE";
  val["port"]["name"] = "port";
  val["port"]["simpletype"] = "string";
  val["port"]["description"] = R"POLYCUBE(Port where this entry is present)POLYCUBE";
  val["port"]["example"] = R"POLYCUBE(port1)POLYCUBE";

  return val;
}

nlohmann::json FwdTableJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> FwdTableJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string FwdTableJsonObject::getAddress() const {
  return m_address;
}

void FwdTableJsonObject::setAddress(std::string value) {
  m_address = value;
  m_addressIsSet = true;
}

bool FwdTableJsonObject::addressIsSet() const {
  return m_addressIsSet;
}

void FwdTableJsonObject::unsetAddress() {
  m_addressIsSet = false;
}



std::string FwdTableJsonObject::getMac() const {
  return m_mac;
}

void FwdTableJsonObject::setMac(std::string value) {
  m_mac = value;
  m_macIsSet = true;
}

bool FwdTableJsonObject::macIsSet() const {
  return m_macIsSet;
}

void FwdTableJsonObject::unsetMac() {
  m_macIsSet = false;
}



std::string FwdTableJsonObject::getPort() const {
  return m_port;
}

void FwdTableJsonObject::setPort(std::string value) {
  m_port = value;
  m_portIsSet = true;
}

bool FwdTableJsonObject::portIsSet() const {
  return m_portIsSet;
}

void FwdTableJsonObject::unsetPort() {
  m_portIsSet = false;
}




}
}
}
}

