/**
* k8switch API
* Kubernetes HyperSwitch Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* K8switchApi.h
*
*/

#pragma once

#define POLYCUBE_SERVICE_NAME "k8switch"


#include <polycube/services/http_router.h>
#include <polycube/services/management_interface.h>
#include <vector>

#include "FwdTableJsonObject.h"
#include "K8switchJsonObject.h"
#include "PortsJsonObject.h"
#include "ServiceJsonObject.h"
#include "ServiceBackendJsonObject.h"
#include <vector>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;
using namespace polycube::service;

class  K8switchApi : public ManagementInterface {
 public:
  K8switchApi();
  virtual ~K8switchApi() {};

  const std::string base = "/" + std::string(POLYCUBE_SERVICE_NAME) + "/";

 protected:
  void setup_routes();
  void control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) override;

  void create_k8switch_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_k8switch_fwd_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_k8switch_fwd_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_k8switch_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_k8switch_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_k8switch_service_backend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_k8switch_service_backend_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_k8switch_service_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_k8switch_service_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_k8switch_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_k8switch_fwd_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_k8switch_fwd_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_k8switch_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_k8switch_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_k8switch_service_backend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_k8switch_service_backend_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_k8switch_service_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_k8switch_service_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_client_subnet_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_cluster_ip_subnet_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_fwd_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_fwd_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_fwd_table_mac_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_fwd_table_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_loglevel_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_ports_peer_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_ports_status_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_ports_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_ports_uuid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_backend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_backend_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_backend_name_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_backend_weight_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_name_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_uuid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_virtual_client_subnet_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_k8switch_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_k8switch_fwd_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_k8switch_fwd_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_k8switch_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_k8switch_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_k8switch_service_backend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_k8switch_service_backend_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_k8switch_service_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_k8switch_service_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_client_subnet_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_cluster_ip_subnet_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_fwd_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_fwd_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_fwd_table_mac_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_fwd_table_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_loglevel_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_ports_peer_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_ports_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_service_backend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_service_backend_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_service_backend_name_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_service_backend_weight_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_service_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_service_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_service_name_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_k8switch_virtual_client_subnet_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);

  void read_k8switch_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_fwd_table_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_fwd_table_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_ports_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_ports_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_backend_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_backend_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_k8switch_service_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);


  polycube::service::Rest::Router router;

  /// <summary>
  /// Create k8switch by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: k8switch
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">k8switchbody object</param>
  virtual void create_k8switch_by_id(const std::string &name, const K8switchJsonObject &value) = 0;
  /// <summary>
  /// Create fwd-table by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: fwd-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="address">ID of address</param>
  /// <param name="value">fwd-tablebody object</param>
  virtual void create_k8switch_fwd_table_by_id(const std::string &name, const std::string &address, const FwdTableJsonObject &value) = 0;
  /// <summary>
  /// Create fwd-table by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: fwd-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">fwd-tablebody object</param>
  virtual void create_k8switch_fwd_table_list_by_id(const std::string &name, const std::vector<FwdTableJsonObject> &value) = 0;
  /// <summary>
  /// Create ports by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">portsbody object</param>
  virtual void create_k8switch_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) = 0;
  /// <summary>
  /// Create ports by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">portsbody object</param>
  virtual void create_k8switch_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) = 0;
  /// <summary>
  /// Create backend by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="ip">ID of ip</param>
  /// <param name="port">ID of port</param>
  /// <param name="value">backendbody object</param>
  virtual void create_k8switch_service_backend_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &port, const ServiceBackendJsonObject &value) = 0;
  /// <summary>
  /// Create backend by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">backendbody object</param>
  virtual void create_k8switch_service_backend_list_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::vector<ServiceBackendJsonObject> &value) = 0;
  /// <summary>
  /// Create service by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: service
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">servicebody object</param>
  virtual void create_k8switch_service_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &value) = 0;
  /// <summary>
  /// Create service by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: service
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">servicebody object</param>
  virtual void create_k8switch_service_list_by_id(const std::string &name, const std::vector<ServiceJsonObject> &value) = 0;
  /// <summary>
  /// Delete k8switch by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: k8switch
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_k8switch_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete fwd-table by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: fwd-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="address">ID of address</param>
  virtual void delete_k8switch_fwd_table_by_id(const std::string &name, const std::string &address) = 0;
  /// <summary>
  /// Delete fwd-table by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: fwd-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_k8switch_fwd_table_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete ports by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual void delete_k8switch_ports_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Delete ports by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_k8switch_ports_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete backend by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="ip">ID of ip</param>
  /// <param name="port">ID of port</param>
  virtual void delete_k8switch_service_backend_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &port) = 0;
  /// <summary>
  /// Delete backend by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  virtual void delete_k8switch_service_backend_list_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) = 0;
  /// <summary>
  /// Delete service by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: service
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  virtual void delete_k8switch_service_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) = 0;
  /// <summary>
  /// Delete service by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: service
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_k8switch_service_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read k8switch by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: k8switch
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual K8switchJsonObject read_k8switch_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read client-subnet by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: client-subnet
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_k8switch_client_subnet_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read cluster-ip-subnet by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: cluster-ip-subnet
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_k8switch_cluster_ip_subnet_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read fwd-table by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: fwd-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="address">ID of address</param>
  virtual FwdTableJsonObject read_k8switch_fwd_table_by_id(const std::string &name, const std::string &address) = 0;
  /// <summary>
  /// Read fwd-table by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: fwd-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<FwdTableJsonObject> read_k8switch_fwd_table_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_k8switch_fwd_table_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read mac by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: mac
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="address">ID of address</param>
  virtual std::string read_k8switch_fwd_table_mac_by_id(const std::string &name, const std::string &address) = 0;
  /// <summary>
  /// Read port by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: port
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="address">ID of address</param>
  virtual std::string read_k8switch_fwd_table_port_by_id(const std::string &name, const std::string &address) = 0;
  /// <summary>
  /// Read k8switch by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: k8switch
  /// </remarks>
  virtual std::vector<K8switchJsonObject> read_k8switch_list_by_id() = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_k8switch_list_by_id_get_list() = 0;
  /// <summary>
  /// Read loglevel by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: loglevel
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual K8switchLoglevelEnum read_k8switch_loglevel_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read ports by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual PortsJsonObject read_k8switch_ports_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read ports by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<PortsJsonObject> read_k8switch_ports_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_k8switch_ports_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read peer by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: peer
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual std::string read_k8switch_ports_peer_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read status by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: status
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual PortsStatusEnum read_k8switch_ports_status_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read type by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: type
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual PortsTypeEnum read_k8switch_ports_type_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read uuid by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: uuid
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual std::string read_k8switch_ports_uuid_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read backend by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="ip">ID of ip</param>
  /// <param name="port">ID of port</param>
  virtual ServiceBackendJsonObject read_k8switch_service_backend_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &port) = 0;
  /// <summary>
  /// Read backend by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  virtual std::vector<ServiceBackendJsonObject> read_k8switch_service_backend_list_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_k8switch_service_backend_list_by_id_get_list(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) = 0;
  /// <summary>
  /// Read name by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: name
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="ip">ID of ip</param>
  /// <param name="port">ID of port</param>
  virtual std::string read_k8switch_service_backend_name_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &port) = 0;
  /// <summary>
  /// Read weight by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: weight
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="ip">ID of ip</param>
  /// <param name="port">ID of port</param>
  virtual uint16_t read_k8switch_service_backend_weight_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &port) = 0;
  /// <summary>
  /// Read service by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: service
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  virtual ServiceJsonObject read_k8switch_service_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) = 0;
  /// <summary>
  /// Read service by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: service
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<ServiceJsonObject> read_k8switch_service_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_k8switch_service_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read name by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: name
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  virtual std::string read_k8switch_service_name_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) = 0;
  /// <summary>
  /// Read type by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: type
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual CubeType read_k8switch_type_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read uuid by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: uuid
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_k8switch_uuid_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read virtual-client-subnet by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: virtual-client-subnet
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_k8switch_virtual_client_subnet_by_id(const std::string &name) = 0;
  /// <summary>
  /// Replace k8switch by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: k8switch
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">k8switchbody object</param>
  virtual void replace_k8switch_by_id(const std::string &name, const K8switchJsonObject &value) = 0;
  /// <summary>
  /// Replace fwd-table by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: fwd-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="address">ID of address</param>
  /// <param name="value">fwd-tablebody object</param>
  virtual void replace_k8switch_fwd_table_by_id(const std::string &name, const std::string &address, const FwdTableJsonObject &value) = 0;
  /// <summary>
  /// Replace fwd-table by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: fwd-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">fwd-tablebody object</param>
  virtual void replace_k8switch_fwd_table_list_by_id(const std::string &name, const std::vector<FwdTableJsonObject> &value) = 0;
  /// <summary>
  /// Replace ports by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">portsbody object</param>
  virtual void replace_k8switch_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) = 0;
  /// <summary>
  /// Replace ports by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">portsbody object</param>
  virtual void replace_k8switch_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) = 0;
  /// <summary>
  /// Replace backend by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="ip">ID of ip</param>
  /// <param name="port">ID of port</param>
  /// <param name="value">backendbody object</param>
  virtual void replace_k8switch_service_backend_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &port, const ServiceBackendJsonObject &value) = 0;
  /// <summary>
  /// Replace backend by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">backendbody object</param>
  virtual void replace_k8switch_service_backend_list_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::vector<ServiceBackendJsonObject> &value) = 0;
  /// <summary>
  /// Replace service by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: service
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">servicebody object</param>
  virtual void replace_k8switch_service_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &value) = 0;
  /// <summary>
  /// Replace service by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: service
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">servicebody object</param>
  virtual void replace_k8switch_service_list_by_id(const std::string &name, const std::vector<ServiceJsonObject> &value) = 0;
  /// <summary>
  /// Update k8switch by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: k8switch
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">k8switchbody object</param>
  virtual void update_k8switch_by_id(const std::string &name, const K8switchJsonObject &value) = 0;
  /// <summary>
  /// Update client-subnet by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: client-subnet
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Range of IPs of pods in this node</param>
  virtual void update_k8switch_client_subnet_by_id(const std::string &name, const std::string &value) = 0;
  /// <summary>
  /// Update cluster-ip-subnet by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: cluster-ip-subnet
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Range of VIPs where clusterIP services are exposed</param>
  virtual void update_k8switch_cluster_ip_subnet_by_id(const std::string &name, const std::string &value) = 0;
  /// <summary>
  /// Update fwd-table by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: fwd-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="address">ID of address</param>
  /// <param name="value">fwd-tablebody object</param>
  virtual void update_k8switch_fwd_table_by_id(const std::string &name, const std::string &address, const FwdTableJsonObject &value) = 0;
  /// <summary>
  /// Update fwd-table by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: fwd-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">fwd-tablebody object</param>
  virtual void update_k8switch_fwd_table_list_by_id(const std::string &name, const std::vector<FwdTableJsonObject> &value) = 0;
  /// <summary>
  /// Update mac by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: mac
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="address">ID of address</param>
  /// <param name="value">Destination MAC address</param>
  virtual void update_k8switch_fwd_table_mac_by_id(const std::string &name, const std::string &address, const std::string &value) = 0;
  /// <summary>
  /// Update port by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: port
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="address">ID of address</param>
  /// <param name="value">Port where this entry is present</param>
  virtual void update_k8switch_fwd_table_port_by_id(const std::string &name, const std::string &address, const std::string &value) = 0;
  /// <summary>
  /// Update k8switch by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: k8switch
  /// </remarks>
  /// <param name="value">k8switchbody object</param>
  virtual void update_k8switch_list_by_id(const std::vector<K8switchJsonObject> &value) = 0;
  /// <summary>
  /// Update loglevel by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: loglevel
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)</param>
  virtual void update_k8switch_loglevel_by_id(const std::string &name, const K8switchLoglevelEnum &value) = 0;
  /// <summary>
  /// Update ports by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">portsbody object</param>
  virtual void update_k8switch_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) = 0;
  /// <summary>
  /// Update ports by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">portsbody object</param>
  virtual void update_k8switch_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) = 0;
  /// <summary>
  /// Update peer by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: peer
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">Peer name, such as a network interfaces (e.g., &#39;veth0&#39;) or another cube (e.g., &#39;br1:port2&#39;)</param>
  virtual void update_k8switch_ports_peer_by_id(const std::string &name, const std::string &portsName, const std::string &value) = 0;
  /// <summary>
  /// Update type by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: type
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">Type of the LB port (e.g. NODEPORT or DEFAULT)</param>
  virtual void update_k8switch_ports_type_by_id(const std::string &name, const std::string &portsName, const PortsTypeEnum &value) = 0;
  /// <summary>
  /// Update backend by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="ip">ID of ip</param>
  /// <param name="port">ID of port</param>
  /// <param name="value">backendbody object</param>
  virtual void update_k8switch_service_backend_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &port, const ServiceBackendJsonObject &value) = 0;
  /// <summary>
  /// Update backend by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">backendbody object</param>
  virtual void update_k8switch_service_backend_list_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::vector<ServiceBackendJsonObject> &value) = 0;
  /// <summary>
  /// Update name by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: name
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="ip">ID of ip</param>
  /// <param name="port">ID of port</param>
  /// <param name="value">name</param>
  virtual void update_k8switch_service_backend_name_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &port, const std::string &value) = 0;
  /// <summary>
  /// Update weight by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: weight
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="ip">ID of ip</param>
  /// <param name="port">ID of port</param>
  /// <param name="value">Weight of the backend in the pool</param>
  virtual void update_k8switch_service_backend_weight_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &port, const uint16_t &value) = 0;
  /// <summary>
  /// Update service by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: service
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">servicebody object</param>
  virtual void update_k8switch_service_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &value) = 0;
  /// <summary>
  /// Update service by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: service
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">servicebody object</param>
  virtual void update_k8switch_service_list_by_id(const std::string &name, const std::vector<ServiceJsonObject> &value) = 0;
  /// <summary>
  /// Update name by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: name
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="vip">ID of vip</param>
  /// <param name="vport">ID of vport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">Service name related to the backend server of the pool is connected to</param>
  virtual void update_k8switch_service_name_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &value) = 0;
  /// <summary>
  /// Update virtual-client-subnet by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: virtual-client-subnet
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Range where client&#39;s IPs are mapped into</param>
  virtual void update_k8switch_virtual_client_subnet_by_id(const std::string &name, const std::string &value) = 0;
};

}
}
}
}

