/**
* lbdsr API
* LoadBalancer Direct Server Return Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "BackendJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

BackendJsonObject::BackendJsonObject() {

  m_poolIsSet = false;
}

BackendJsonObject::~BackendJsonObject() {}

void BackendJsonObject::validateKeys() {

}

void BackendJsonObject::validateMandatoryFields() {

}

void BackendJsonObject::validateParams() {

}

nlohmann::json BackendJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  {
    nlohmann::json jsonArray;
    for (auto& item : m_pool) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["pool"] = jsonArray;
    }
  }

  return val;
}

void BackendJsonObject::fromJson(nlohmann::json& val) {
  for(nlohmann::json::iterator it = val.begin(); it != val.end(); ++it) {
    std::string key = it.key();
    bool found = (std::find(allowedParameters_.begin(), allowedParameters_.end(), key) != allowedParameters_.end());
    if (!found) {
      throw std::runtime_error(key + " is not a valid parameter");
      return;
    }
  }

  m_pool.clear();
  for (auto& item : val["pool"]) {

    BackendPoolJsonObject newItem;
    newItem.fromJson(item);
    m_pool.push_back(newItem);
    m_poolIsSet = true;
  }

}

nlohmann::json BackendJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json BackendJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["pool"]["name"] = "pool";
  val["pool"]["type"] = "leaf"; // Suppose that type is leaf
  val["pool"]["type"] = "list";
  val["pool"]["description"] = R"POLYCUBE(pool of backend servers serving requests)POLYCUBE";
  val["pool"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json BackendJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json BackendJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  val["pool"]["name"] = "pool";
  val["pool"]["type"] = "list";
  val["pool"]["description"] = R"POLYCUBE(pool of backend servers serving requests)POLYCUBE";
  val["pool"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

std::vector<std::string> BackendJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

const std::vector<BackendPoolJsonObject>& BackendJsonObject::getPool() const{
  return m_pool;
}

void BackendJsonObject::addBackendPool(BackendPoolJsonObject value) {
  m_pool.push_back(value);
}


bool BackendJsonObject::poolIsSet() const {
  return m_poolIsSet;
}

void BackendJsonObject::unsetPool() {
  m_poolIsSet = false;
}




}
}
}
}

