/**
* lbdsr API
* LoadBalancer Direct Server Return Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "FrontendJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

FrontendJsonObject::FrontendJsonObject() {

  m_vipIsSet = false;

  m_macIsSet = false;
}

FrontendJsonObject::~FrontendJsonObject() {}

void FrontendJsonObject::validateKeys() {

}

void FrontendJsonObject::validateMandatoryFields() {

}

void FrontendJsonObject::validateParams() {

  if (m_vipIsSet) {
    std::string patter_value = R"PATTERN((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?)PATTERN";
    std::regex e (patter_value);
    if (!std::regex_match(m_vip, e))
      throw std::runtime_error("Variable vip has not a valid format");
  }
  if (m_macIsSet) {
    std::string patter_value = R"PATTERN([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})PATTERN";
    std::regex e (patter_value);
    if (!std::regex_match(m_mac, e))
      throw std::runtime_error("Variable mac has not a valid format");
  }
}

nlohmann::json FrontendJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_vipIsSet) {
    val["vip"] = m_vip;
  }

  if (m_macIsSet) {
    val["mac"] = m_mac;
  }


  return val;
}

void FrontendJsonObject::fromJson(nlohmann::json& val) {
  for(nlohmann::json::iterator it = val.begin(); it != val.end(); ++it) {
    std::string key = it.key();
    bool found = (std::find(allowedParameters_.begin(), allowedParameters_.end(), key) != allowedParameters_.end());
    if (!found) {
      throw std::runtime_error(key + " is not a valid parameter");
      return;
    }
  }

  if (val.find("vip") != val.end()) {
    setVip(val.at("vip"));
  }

  if (val.find("mac") != val.end()) {
    setMac(val.at("mac"));
  }
}

nlohmann::json FrontendJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json FrontendJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["vip"]["name"] = "vip";
  val["vip"]["type"] = "leaf"; // Suppose that type is leaf
  val["vip"]["simpletype"] = "string";
  val["vip"]["description"] = R"POLYCUBE(IP address of the loadbalancer frontend)POLYCUBE";
  val["vip"]["example"] = R"POLYCUBE(130.192.100.1)POLYCUBE";
  val["mac"]["name"] = "mac";
  val["mac"]["type"] = "leaf"; // Suppose that type is leaf
  val["mac"]["simpletype"] = "string";
  val["mac"]["description"] = R"POLYCUBE(MAC address of the port)POLYCUBE";
  val["mac"]["example"] = R"POLYCUBE(aa:bb:cc:dd:ee:ff)POLYCUBE";

  return val;
}

nlohmann::json FrontendJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["vip"]["name"] = "vip";
  val["vip"]["simpletype"] = "string";
  val["vip"]["description"] = R"POLYCUBE(IP address of the loadbalancer frontend)POLYCUBE";
  val["vip"]["example"] = R"POLYCUBE(130.192.100.1)POLYCUBE";
  val["mac"]["name"] = "mac";
  val["mac"]["simpletype"] = "string";
  val["mac"]["description"] = R"POLYCUBE(MAC address of the port)POLYCUBE";
  val["mac"]["example"] = R"POLYCUBE(aa:bb:cc:dd:ee:ff)POLYCUBE";

  return val;
}

nlohmann::json FrontendJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> FrontendJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string FrontendJsonObject::getVip() const {
  return m_vip;
}

void FrontendJsonObject::setVip(std::string value) {
  m_vip = value;
  m_vipIsSet = true;
}

bool FrontendJsonObject::vipIsSet() const {
  return m_vipIsSet;
}

void FrontendJsonObject::unsetVip() {
  m_vipIsSet = false;
}



std::string FrontendJsonObject::getMac() const {
  return m_mac;
}

void FrontendJsonObject::setMac(std::string value) {
  m_mac = value;
  m_macIsSet = true;
}

bool FrontendJsonObject::macIsSet() const {
  return m_macIsSet;
}

void FrontendJsonObject::unsetMac() {
  m_macIsSet = false;
}




}
}
}
}

