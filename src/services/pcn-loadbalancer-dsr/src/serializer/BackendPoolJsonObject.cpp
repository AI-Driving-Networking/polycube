/**
* lbdsr API
* LoadBalancer Direct Server Return Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "BackendPoolJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

BackendPoolJsonObject::BackendPoolJsonObject() {

  m_idIsSet = false;

  m_macIsSet = false;
}

BackendPoolJsonObject::~BackendPoolJsonObject() {}

void BackendPoolJsonObject::validateKeys() {

  if (!m_idIsSet) {
    throw std::runtime_error("Variable id is required");
  }
}

void BackendPoolJsonObject::validateMandatoryFields() {

  if (!m_macIsSet) {
    throw std::runtime_error("Variable mac is required");
  }
}

void BackendPoolJsonObject::validateParams() {

  if (m_macIsSet) {
    std::string patter_value = R"PATTERN([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})PATTERN";
    std::regex e (patter_value);
    if (!std::regex_match(m_mac, e))
      throw std::runtime_error("Variable mac has not a valid format");
  }
}

nlohmann::json BackendPoolJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_idIsSet) {
    val["id"] = m_id;
  }

  val["mac"] = m_mac;

  return val;
}

void BackendPoolJsonObject::fromJson(nlohmann::json& val) {
  for(nlohmann::json::iterator it = val.begin(); it != val.end(); ++it) {
    std::string key = it.key();
    bool found = (std::find(allowedParameters_.begin(), allowedParameters_.end(), key) != allowedParameters_.end());
    if (!found) {
      throw std::runtime_error(key + " is not a valid parameter");
      return;
    }
  }

  if (val.find("id") != val.end()) {
    setId(val.at("id"));
  }

  if (val.find("mac") != val.end()) {
    setMac(val.at("mac"));
  }
}

nlohmann::json BackendPoolJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["id"]["name"] = "id";
  val["id"]["type"] = "key";
  val["id"]["simpletype"] = "integer";
  val["id"]["description"] = R"POLYCUBE(id)POLYCUBE";
  val["id"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json BackendPoolJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["mac"]["name"] = "mac";
  val["mac"]["type"] = "leaf"; // Suppose that type is leaf
  val["mac"]["simpletype"] = "string";
  val["mac"]["description"] = R"POLYCUBE(MAC address of the backend server of the pool)POLYCUBE";
  val["mac"]["example"] = R"POLYCUBE(aa:bb:cc:dd:ee:ff)POLYCUBE";

  return val;
}

nlohmann::json BackendPoolJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json BackendPoolJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> BackendPoolJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

uint32_t BackendPoolJsonObject::getId() const {
  return m_id;
}

void BackendPoolJsonObject::setId(uint32_t value) {
  m_id = value;
  m_idIsSet = true;
}

bool BackendPoolJsonObject::idIsSet() const {
  return m_idIsSet;
}

void BackendPoolJsonObject::unsetId() {
  m_idIsSet = false;
}



std::string BackendPoolJsonObject::getMac() const {
  return m_mac;
}

void BackendPoolJsonObject::setMac(std::string value) {
  m_mac = value;
  m_macIsSet = true;
}

bool BackendPoolJsonObject::macIsSet() const {
  return m_macIsSet;
}

void BackendPoolJsonObject::unsetMac() {
  m_macIsSet = false;
}




}
}
}
}

