/**
* lbdsr API
* LoadBalancer Direct Server Return Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* LbdsrApi.h
*
*/

#pragma once

#define POLYCUBE_SERVICE_NAME "lbdsr"


#include <polycube/services/http_router.h>
#include <polycube/services/management_interface.h>
#include <vector>

#include "BackendJsonObject.h"
#include "BackendPoolJsonObject.h"
#include "FrontendJsonObject.h"
#include "LbdsrJsonObject.h"
#include "PortsJsonObject.h"
#include <vector>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;
using namespace polycube::service;

class  LbdsrApi : public ManagementInterface {
 public:
  LbdsrApi();
  virtual ~LbdsrApi() {};

  const std::string base = "/" + std::string(POLYCUBE_SERVICE_NAME) + "/";

 protected:
  void setup_routes();
  void control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) override;

  void create_lbdsr_backend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_lbdsr_backend_pool_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_lbdsr_backend_pool_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_lbdsr_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_lbdsr_frontend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_lbdsr_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_lbdsr_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_lbdsr_backend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_lbdsr_backend_pool_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_lbdsr_backend_pool_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_lbdsr_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_lbdsr_frontend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_lbdsr_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_lbdsr_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_algorithm_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_backend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_backend_pool_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_backend_pool_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_backend_pool_mac_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_frontend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_frontend_mac_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_frontend_vip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_loglevel_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_ports_peer_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_ports_status_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_ports_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_ports_uuid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_uuid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_lbdsr_backend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_lbdsr_backend_pool_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_lbdsr_backend_pool_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_lbdsr_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_lbdsr_frontend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_lbdsr_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_lbdsr_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_algorithm_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_backend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_backend_pool_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_backend_pool_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_frontend_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_frontend_mac_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_frontend_vip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_loglevel_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_ports_peer_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_lbdsr_ports_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);

  void read_lbdsr_backend_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_backend_pool_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_backend_pool_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_frontend_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_ports_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_lbdsr_ports_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);


  polycube::service::Rest::Router router;

  /// <summary>
  /// Create backend by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">backendbody object</param>
  virtual void create_lbdsr_backend_by_id(const std::string &name, const BackendJsonObject &value) = 0;
  /// <summary>
  /// Create pool by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: pool
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">poolbody object</param>
  virtual void create_lbdsr_backend_pool_by_id(const std::string &name, const uint32_t &id, const BackendPoolJsonObject &value) = 0;
  /// <summary>
  /// Create pool by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: pool
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">poolbody object</param>
  virtual void create_lbdsr_backend_pool_list_by_id(const std::string &name, const std::vector<BackendPoolJsonObject> &value) = 0;
  /// <summary>
  /// Create lbdsr by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: lbdsr
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">lbdsrbody object</param>
  virtual void create_lbdsr_by_id(const std::string &name, const LbdsrJsonObject &value) = 0;
  /// <summary>
  /// Create frontend by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: frontend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">frontendbody object</param>
  virtual void create_lbdsr_frontend_by_id(const std::string &name, const FrontendJsonObject &value) = 0;
  /// <summary>
  /// Create ports by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">portsbody object</param>
  virtual void create_lbdsr_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) = 0;
  /// <summary>
  /// Create ports by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">portsbody object</param>
  virtual void create_lbdsr_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) = 0;
  /// <summary>
  /// Delete backend by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_lbdsr_backend_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete pool by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: pool
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual void delete_lbdsr_backend_pool_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Delete pool by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: pool
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_lbdsr_backend_pool_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete lbdsr by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: lbdsr
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_lbdsr_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete frontend by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: frontend
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_lbdsr_frontend_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete ports by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual void delete_lbdsr_ports_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Delete ports by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_lbdsr_ports_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read algorithm by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: algorithm
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_lbdsr_algorithm_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read backend by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual BackendJsonObject read_lbdsr_backend_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read pool by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: pool
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual BackendPoolJsonObject read_lbdsr_backend_pool_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read pool by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: pool
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<BackendPoolJsonObject> read_lbdsr_backend_pool_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_lbdsr_backend_pool_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read mac by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: mac
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_lbdsr_backend_pool_mac_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read lbdsr by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: lbdsr
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual LbdsrJsonObject read_lbdsr_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read frontend by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: frontend
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual FrontendJsonObject read_lbdsr_frontend_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read mac by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: mac
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_lbdsr_frontend_mac_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read vip by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: vip
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_lbdsr_frontend_vip_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read lbdsr by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: lbdsr
  /// </remarks>
  virtual std::vector<LbdsrJsonObject> read_lbdsr_list_by_id() = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_lbdsr_list_by_id_get_list() = 0;
  /// <summary>
  /// Read loglevel by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: loglevel
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual LbdsrLoglevelEnum read_lbdsr_loglevel_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read ports by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual PortsJsonObject read_lbdsr_ports_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read ports by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<PortsJsonObject> read_lbdsr_ports_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_lbdsr_ports_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read peer by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: peer
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual std::string read_lbdsr_ports_peer_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read status by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: status
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual PortsStatusEnum read_lbdsr_ports_status_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read type by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: type
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual PortsTypeEnum read_lbdsr_ports_type_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read uuid by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: uuid
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual std::string read_lbdsr_ports_uuid_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read type by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: type
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual CubeType read_lbdsr_type_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read uuid by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: uuid
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_lbdsr_uuid_by_id(const std::string &name) = 0;
  /// <summary>
  /// Replace backend by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">backendbody object</param>
  virtual void replace_lbdsr_backend_by_id(const std::string &name, const BackendJsonObject &value) = 0;
  /// <summary>
  /// Replace pool by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: pool
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">poolbody object</param>
  virtual void replace_lbdsr_backend_pool_by_id(const std::string &name, const uint32_t &id, const BackendPoolJsonObject &value) = 0;
  /// <summary>
  /// Replace pool by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: pool
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">poolbody object</param>
  virtual void replace_lbdsr_backend_pool_list_by_id(const std::string &name, const std::vector<BackendPoolJsonObject> &value) = 0;
  /// <summary>
  /// Replace lbdsr by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: lbdsr
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">lbdsrbody object</param>
  virtual void replace_lbdsr_by_id(const std::string &name, const LbdsrJsonObject &value) = 0;
  /// <summary>
  /// Replace frontend by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: frontend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">frontendbody object</param>
  virtual void replace_lbdsr_frontend_by_id(const std::string &name, const FrontendJsonObject &value) = 0;
  /// <summary>
  /// Replace ports by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">portsbody object</param>
  virtual void replace_lbdsr_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) = 0;
  /// <summary>
  /// Replace ports by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">portsbody object</param>
  virtual void replace_lbdsr_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) = 0;
  /// <summary>
  /// Update algorithm by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: algorithm
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Defines the algorithm which LB use to direct requests to the node of the pool (Random, RoundRobin, ..)</param>
  virtual void update_lbdsr_algorithm_by_id(const std::string &name, const std::string &value) = 0;
  /// <summary>
  /// Update backend by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: backend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">backendbody object</param>
  virtual void update_lbdsr_backend_by_id(const std::string &name, const BackendJsonObject &value) = 0;
  /// <summary>
  /// Update pool by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: pool
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">poolbody object</param>
  virtual void update_lbdsr_backend_pool_by_id(const std::string &name, const uint32_t &id, const BackendPoolJsonObject &value) = 0;
  /// <summary>
  /// Update pool by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: pool
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">poolbody object</param>
  virtual void update_lbdsr_backend_pool_list_by_id(const std::string &name, const std::vector<BackendPoolJsonObject> &value) = 0;
  /// <summary>
  /// Update lbdsr by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: lbdsr
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">lbdsrbody object</param>
  virtual void update_lbdsr_by_id(const std::string &name, const LbdsrJsonObject &value) = 0;
  /// <summary>
  /// Update frontend by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: frontend
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">frontendbody object</param>
  virtual void update_lbdsr_frontend_by_id(const std::string &name, const FrontendJsonObject &value) = 0;
  /// <summary>
  /// Update mac by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: mac
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">MAC address of the port</param>
  virtual void update_lbdsr_frontend_mac_by_id(const std::string &name, const std::string &value) = 0;
  /// <summary>
  /// Update vip by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: vip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">IP address of the loadbalancer frontend</param>
  virtual void update_lbdsr_frontend_vip_by_id(const std::string &name, const std::string &value) = 0;
  /// <summary>
  /// Update lbdsr by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: lbdsr
  /// </remarks>
  /// <param name="value">lbdsrbody object</param>
  virtual void update_lbdsr_list_by_id(const std::vector<LbdsrJsonObject> &value) = 0;
  /// <summary>
  /// Update loglevel by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: loglevel
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)</param>
  virtual void update_lbdsr_loglevel_by_id(const std::string &name, const LbdsrLoglevelEnum &value) = 0;
  /// <summary>
  /// Update ports by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">portsbody object</param>
  virtual void update_lbdsr_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) = 0;
  /// <summary>
  /// Update ports by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">portsbody object</param>
  virtual void update_lbdsr_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) = 0;
  /// <summary>
  /// Update peer by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: peer
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">Peer name, such as a network interfaces (e.g., &#39;veth0&#39;) or another cube (e.g., &#39;br1:port2&#39;)</param>
  virtual void update_lbdsr_ports_peer_by_id(const std::string &name, const std::string &portsName, const std::string &value) = 0;
  /// <summary>
  /// Update type by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: type
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">Type of the LB port (e.g. FRONTEND or BACKEND)</param>
  virtual void update_lbdsr_ports_type_by_id(const std::string &name, const std::string &portsName, const PortsTypeEnum &value) = 0;
};

}
}
}
}

