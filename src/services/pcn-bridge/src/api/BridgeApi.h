/**
* bridge API
* bridge API generated from bridge.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
*/


/* Do not edit this file manually */

/*
 * BridgeApi.h
 *
 */

#pragma once


#include <polycube/services/http_router.h>
#include <polycube/services/management_interface.h>
#include <vector>

#include "BridgeSchema.h"
#include "FilteringdatabaseSchema.h"
#include "PortsAccessSchema.h"
#include "PortsSchema.h"
#include "PortsStpSchema.h"
#include "PortsTrunkAllowedSchema.h"
#include "PortsTrunkSchema.h"
#include "StpSchema.h"
#include <vector>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;
using namespace polycube::service;

class  BridgeApi : public ManagementInterface {
public:
    BridgeApi();
    virtual ~BridgeApi() {};

    const std::string base = "/";

protected:
    void setupRoutes();
    void control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) override;

    void create_bridge_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_filteringdatabase_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_filteringdatabase_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_ports_access_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_ports_stp_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_ports_stp_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_ports_trunk_allowed_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_ports_trunk_allowed_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_ports_trunk_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_stp_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void create_bridge_stp_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_filteringdatabase_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_filteringdatabase_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_ports_access_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_ports_stp_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_ports_stp_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_ports_trunk_allowed_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_ports_trunk_allowed_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_ports_trunk_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_stp_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void delete_bridge_stp_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_agingtime_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_filteringdatabase_age_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_filteringdatabase_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_filteringdatabase_entrytype_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_filteringdatabase_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_filteringdatabase_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_access_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_access_vlanid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_address_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_mode_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_peer_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_status_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_stp_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_stp_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_stp_pathcost_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_stp_portpriority_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_stp_state_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_trunk_allowed_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_trunk_allowed_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_trunk_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_trunk_nativevlan_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_ports_uuid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_stp_address_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_stp_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_stp_forwarddelay_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_stp_hellotime_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_stp_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_stp_maxmessageage_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_stp_priority_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_stpenabled_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void read_bridge_uuid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_agingtime_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_filteringdatabase_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_filteringdatabase_entrytype_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_filteringdatabase_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_filteringdatabase_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_access_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_access_vlanid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_address_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_mode_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_peer_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_status_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_stp_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_stp_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_stp_pathcost_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_stp_portpriority_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_trunk_allowed_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_trunk_allowed_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_trunk_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_ports_trunk_nativevlan_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_stp_address_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_stp_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_stp_forwarddelay_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_stp_hellotime_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_stp_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_stp_maxmessageage_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_stp_priority_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_stpenabled_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
    void update_bridge_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);

    polycube::service::Rest::Router router;

    /// <summary>
    /// Create bridge by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: bridge
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="bridge">bridgebody object</param>
    virtual BridgeSchema create_bridge_by_id(const std::string &name, const BridgeSchema &bridge) = 0;
    /// <summary>
    /// Create filteringdatabase by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: filteringdatabase
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="address">ID of address</param>
    /// <param name="filteringdatabase">filteringdatabasebody object</param>
    virtual FilteringdatabaseSchema create_bridge_filteringdatabase_by_id(const std::string &name, const std::string &vlan, const std::string &address, const FilteringdatabaseSchema &filteringdatabase) = 0;
    /// <summary>
    /// Create filteringdatabase by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: filteringdatabase
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="filteringdatabase">filteringdatabasebody object</param>
    virtual std::vector<FilteringdatabaseSchema> create_bridge_filteringdatabase_list_by_id(const std::string &name, const std::vector<FilteringdatabaseSchema> &filteringdatabase) = 0;
    /// <summary>
    /// Create access by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: access
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="access">accessbody object</param>
    virtual PortsAccessSchema create_bridge_ports_access_by_id(const std::string &name, const std::string &portsName, const PortsAccessSchema &access) = 0;
    /// <summary>
    /// Create ports by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: ports
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="ports">portsbody object</param>
    virtual PortsSchema create_bridge_ports_by_id(const std::string &name, const std::string &portsName, const PortsSchema &ports) = 0;
    /// <summary>
    /// Create ports by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: ports
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="ports">portsbody object</param>
    virtual std::vector<PortsSchema> create_bridge_ports_list_by_id(const std::string &name, const std::vector<PortsSchema> &ports) = 0;
    /// <summary>
    /// Create stp by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="stp">stpbody object</param>
    virtual PortsStpSchema create_bridge_ports_stp_by_id(const std::string &name, const std::string &portsName, const std::string &vlan, const PortsStpSchema &stp) = 0;
    /// <summary>
    /// Create stp by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="stp">stpbody object</param>
    virtual std::vector<PortsStpSchema> create_bridge_ports_stp_list_by_id(const std::string &name, const std::string &portsName, const std::vector<PortsStpSchema> &stp) = 0;
    /// <summary>
    /// Create allowed by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: allowed
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlanid">ID of vlanid</param>
    /// <param name="allowed">allowedbody object</param>
    virtual PortsTrunkAllowedSchema create_bridge_ports_trunk_allowed_by_id(const std::string &name, const std::string &portsName, const std::string &vlanid, const PortsTrunkAllowedSchema &allowed) = 0;
    /// <summary>
    /// Create allowed by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: allowed
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="allowed">allowedbody object</param>
    virtual std::vector<PortsTrunkAllowedSchema> create_bridge_ports_trunk_allowed_list_by_id(const std::string &name, const std::string &portsName, const std::vector<PortsTrunkAllowedSchema> &allowed) = 0;
    /// <summary>
    /// Create trunk by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: trunk
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="trunk">trunkbody object</param>
    virtual PortsTrunkSchema create_bridge_ports_trunk_by_id(const std::string &name, const std::string &portsName, const PortsTrunkSchema &trunk) = 0;
    /// <summary>
    /// Create stp by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="stp">stpbody object</param>
    virtual StpSchema create_bridge_stp_by_id(const std::string &name, const std::string &vlan, const StpSchema &stp) = 0;
    /// <summary>
    /// Create stp by ID
    /// </summary>
    /// <remarks>
    /// Create operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="stp">stpbody object</param>
    virtual std::vector<StpSchema> create_bridge_stp_list_by_id(const std::string &name, const std::vector<StpSchema> &stp) = 0;
    /// <summary>
    /// Delete bridge by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: bridge
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual void delete_bridge_by_id(const std::string &name) = 0;
    /// <summary>
    /// Delete filteringdatabase by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: filteringdatabase
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="address">ID of address</param>
    virtual void delete_bridge_filteringdatabase_by_id(const std::string &name, const std::string &vlan, const std::string &address) = 0;
    /// <summary>
    /// Delete filteringdatabase by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: filteringdatabase
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual void delete_bridge_filteringdatabase_list_by_id(const std::string &name) = 0;
    /// <summary>
    /// Delete access by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: access
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual void delete_bridge_ports_access_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Delete ports by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: ports
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual void delete_bridge_ports_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Delete ports by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: ports
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual void delete_bridge_ports_list_by_id(const std::string &name) = 0;
    /// <summary>
    /// Delete stp by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual void delete_bridge_ports_stp_by_id(const std::string &name, const std::string &portsName, const std::string &vlan) = 0;
    /// <summary>
    /// Delete stp by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual void delete_bridge_ports_stp_list_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Delete allowed by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: allowed
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlanid">ID of vlanid</param>
    virtual void delete_bridge_ports_trunk_allowed_by_id(const std::string &name, const std::string &portsName, const std::string &vlanid) = 0;
    /// <summary>
    /// Delete allowed by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: allowed
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual void delete_bridge_ports_trunk_allowed_list_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Delete trunk by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: trunk
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual void delete_bridge_ports_trunk_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Delete stp by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual void delete_bridge_stp_by_id(const std::string &name, const std::string &vlan) = 0;
    /// <summary>
    /// Delete stp by ID
    /// </summary>
    /// <remarks>
    /// Delete operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual void delete_bridge_stp_list_by_id(const std::string &name) = 0;
    /// <summary>
    /// Read agingtime by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: agingtime
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual int32_t read_bridge_agingtime_by_id(const std::string &name) = 0;
    /// <summary>
    /// Read bridge by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: bridge
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual BridgeSchema read_bridge_by_id(const std::string &name) = 0;
    /// <summary>
    /// Read age by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: age
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="address">ID of address</param>
    virtual int32_t read_bridge_filteringdatabase_age_by_id(const std::string &name, const std::string &vlan, const std::string &address) = 0;
    /// <summary>
    /// Read filteringdatabase by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: filteringdatabase
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="address">ID of address</param>
    virtual FilteringdatabaseSchema read_bridge_filteringdatabase_by_id(const std::string &name, const std::string &vlan, const std::string &address) = 0;
    /// <summary>
    /// Read entrytype by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: entrytype
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="address">ID of address</param>
    virtual std::string read_bridge_filteringdatabase_entrytype_by_id(const std::string &name, const std::string &vlan, const std::string &address) = 0;
    /// <summary>
    /// Read filteringdatabase by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: filteringdatabase
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual std::vector<FilteringdatabaseSchema> read_bridge_filteringdatabase_list_by_id(const std::string &name) = 0;
    virtual std::vector<std::string> read_bridge_filteringdatabase_list_by_id_get_list() = 0;
    /// <summary>
    /// Read port by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: port
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="address">ID of address</param>
    virtual std::string read_bridge_filteringdatabase_port_by_id(const std::string &name, const std::string &vlan, const std::string &address) = 0;
    /// <summary>
    /// Read bridge by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: bridge
    /// </remarks>
    virtual std::vector<BridgeSchema> read_bridge_list_by_id() = 0;
    virtual std::vector<std::string> read_bridge_list_by_id_get_list() = 0;
    /// <summary>
    /// Read access by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: access
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual PortsAccessSchema read_bridge_ports_access_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Read vlanid by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: vlanid
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual int32_t read_bridge_ports_access_vlanid_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Read address by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: address
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual std::string read_bridge_ports_address_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Read ports by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: ports
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual PortsSchema read_bridge_ports_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Read ports by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: ports
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual std::vector<PortsSchema> read_bridge_ports_list_by_id(const std::string &name) = 0;
    virtual std::vector<std::string> read_bridge_ports_list_by_id_get_list() = 0;
    /// <summary>
    /// Read mode by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: mode
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual std::string read_bridge_ports_mode_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Read peer by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: peer
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual std::string read_bridge_ports_peer_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Read status by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: status
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual std::string read_bridge_ports_status_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Read stp by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual PortsStpSchema read_bridge_ports_stp_by_id(const std::string &name, const std::string &portsName, const std::string &vlan) = 0;
    /// <summary>
    /// Read stp by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual std::vector<PortsStpSchema> read_bridge_ports_stp_list_by_id(const std::string &name, const std::string &portsName) = 0;
    virtual std::vector<std::string> read_bridge_ports_stp_list_by_id_get_list() = 0;
    /// <summary>
    /// Read pathcost by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: pathcost
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual int32_t read_bridge_ports_stp_pathcost_by_id(const std::string &name, const std::string &portsName, const std::string &vlan) = 0;
    /// <summary>
    /// Read portpriority by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: portpriority
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual int32_t read_bridge_ports_stp_portpriority_by_id(const std::string &name, const std::string &portsName, const std::string &vlan) = 0;
    /// <summary>
    /// Read state by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: state
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual std::string read_bridge_ports_stp_state_by_id(const std::string &name, const std::string &portsName, const std::string &vlan) = 0;
    /// <summary>
    /// Read allowed by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: allowed
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlanid">ID of vlanid</param>
    virtual PortsTrunkAllowedSchema read_bridge_ports_trunk_allowed_by_id(const std::string &name, const std::string &portsName, const std::string &vlanid) = 0;
    /// <summary>
    /// Read allowed by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: allowed
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual std::vector<PortsTrunkAllowedSchema> read_bridge_ports_trunk_allowed_list_by_id(const std::string &name, const std::string &portsName) = 0;
    virtual std::vector<std::string> read_bridge_ports_trunk_allowed_list_by_id_get_list() = 0;
    /// <summary>
    /// Read trunk by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: trunk
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual PortsTrunkSchema read_bridge_ports_trunk_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Read nativevlan by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: nativevlan
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual int32_t read_bridge_ports_trunk_nativevlan_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Read uuid by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: uuid
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    virtual std::string read_bridge_ports_uuid_by_id(const std::string &name, const std::string &portsName) = 0;
    /// <summary>
    /// Read address by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: address
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual std::string read_bridge_stp_address_by_id(const std::string &name, const std::string &vlan) = 0;
    /// <summary>
    /// Read stp by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual StpSchema read_bridge_stp_by_id(const std::string &name, const std::string &vlan) = 0;
    /// <summary>
    /// Read forwarddelay by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: forwarddelay
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual int32_t read_bridge_stp_forwarddelay_by_id(const std::string &name, const std::string &vlan) = 0;
    /// <summary>
    /// Read hellotime by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: hellotime
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual int32_t read_bridge_stp_hellotime_by_id(const std::string &name, const std::string &vlan) = 0;
    /// <summary>
    /// Read stp by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual std::vector<StpSchema> read_bridge_stp_list_by_id(const std::string &name) = 0;
    virtual std::vector<std::string> read_bridge_stp_list_by_id_get_list() = 0;
    /// <summary>
    /// Read maxmessageage by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: maxmessageage
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual int32_t read_bridge_stp_maxmessageage_by_id(const std::string &name, const std::string &vlan) = 0;
    /// <summary>
    /// Read priority by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: priority
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    virtual int32_t read_bridge_stp_priority_by_id(const std::string &name, const std::string &vlan) = 0;
    /// <summary>
    /// Read stpenabled by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: stpenabled
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual bool read_bridge_stpenabled_by_id(const std::string &name) = 0;
    /// <summary>
    /// Read type by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: type
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual std::string read_bridge_type_by_id(const std::string &name) = 0;
    /// <summary>
    /// Read uuid by ID
    /// </summary>
    /// <remarks>
    /// Read operation of resource: uuid
    /// </remarks>
    /// <param name="name">ID of name</param>
    virtual std::string read_bridge_uuid_by_id(const std::string &name) = 0;
    /// <summary>
    /// Update agingtime by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: agingtime
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="agingtime">Aging time of the filtering database</param>
    virtual void update_bridge_agingtime_by_id(const std::string &name, const int32_t &agingtime) = 0;
    /// <summary>
    /// Update bridge by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: bridge
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="bridge">bridgebody object</param>
    virtual void update_bridge_by_id(const std::string &name, const BridgeSchema &bridge) = 0;
    /// <summary>
    /// Update filteringdatabase by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: filteringdatabase
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="address">ID of address</param>
    /// <param name="filteringdatabase">filteringdatabasebody object</param>
    virtual void update_bridge_filteringdatabase_by_id(const std::string &name, const std::string &vlan, const std::string &address, const FilteringdatabaseSchema &filteringdatabase) = 0;
    /// <summary>
    /// Update entrytype by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: entrytype
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="address">ID of address</param>
    /// <param name="entrytype">Type of filtering entry</param>
    virtual void update_bridge_filteringdatabase_entrytype_by_id(const std::string &name, const std::string &vlan, const std::string &address, const std::string &entrytype) = 0;
    /// <summary>
    /// Update filteringdatabase by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: filteringdatabase
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="filteringdatabase">filteringdatabasebody object</param>
    virtual void update_bridge_filteringdatabase_list_by_id(const std::string &name, const std::vector<FilteringdatabaseSchema> &filteringdatabase) = 0;
    /// <summary>
    /// Update port by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: port
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="address">ID of address</param>
    /// <param name="port">Output port name</param>
    virtual void update_bridge_filteringdatabase_port_by_id(const std::string &name, const std::string &vlan, const std::string &address, const std::string &port) = 0;
    /// <summary>
    /// Update access by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: access
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="access">accessbody object</param>
    virtual void update_bridge_ports_access_by_id(const std::string &name, const std::string &portsName, const PortsAccessSchema &access) = 0;
    /// <summary>
    /// Update vlanid by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: vlanid
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlanid">VLAN associated with this interface</param>
    virtual void update_bridge_ports_access_vlanid_by_id(const std::string &name, const std::string &portsName, const int32_t &vlanid) = 0;
    /// <summary>
    /// Update address by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: address
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="address">MAC address of the port</param>
    virtual void update_bridge_ports_address_by_id(const std::string &name, const std::string &portsName, const std::string &address) = 0;
    /// <summary>
    /// Update ports by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: ports
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="ports">portsbody object</param>
    virtual void update_bridge_ports_by_id(const std::string &name, const std::string &portsName, const PortsSchema &ports) = 0;
    /// <summary>
    /// Update ports by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: ports
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="ports">portsbody object</param>
    virtual void update_bridge_ports_list_by_id(const std::string &name, const std::vector<PortsSchema> &ports) = 0;
    /// <summary>
    /// Update mode by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: mode
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="mode">Type of bridge interface: access/trunk</param>
    virtual void update_bridge_ports_mode_by_id(const std::string &name, const std::string &portsName, const std::string &mode) = 0;
    /// <summary>
    /// Update peer by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: peer
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="peer">Peer name, such as a network interfaces (e.g., &#39;veth0&#39;) or another cube (e.g., &#39;br1:port2&#39;)</param>
    virtual void update_bridge_ports_peer_by_id(const std::string &name, const std::string &portsName, const std::string &peer) = 0;
    /// <summary>
    /// Update status by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: status
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="status">Status of the port (UP or DOWN)</param>
    virtual void update_bridge_ports_status_by_id(const std::string &name, const std::string &portsName, const std::string &status) = 0;
    /// <summary>
    /// Update stp by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="stp">stpbody object</param>
    virtual void update_bridge_ports_stp_by_id(const std::string &name, const std::string &portsName, const std::string &vlan, const PortsStpSchema &stp) = 0;
    /// <summary>
    /// Update stp by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="stp">stpbody object</param>
    virtual void update_bridge_ports_stp_list_by_id(const std::string &name, const std::string &portsName, const std::vector<PortsStpSchema> &stp) = 0;
    /// <summary>
    /// Update pathcost by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: pathcost
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="pathcost">STP cost associated with this interface</param>
    virtual void update_bridge_ports_stp_pathcost_by_id(const std::string &name, const std::string &portsName, const std::string &vlan, const int32_t &pathcost) = 0;
    /// <summary>
    /// Update portpriority by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: portpriority
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="portpriority">Port priority of this interface</param>
    virtual void update_bridge_ports_stp_portpriority_by_id(const std::string &name, const std::string &portsName, const std::string &vlan, const int32_t &portpriority) = 0;
    /// <summary>
    /// Update allowed by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: allowed
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="vlanid">ID of vlanid</param>
    /// <param name="allowed">allowedbody object</param>
    virtual void update_bridge_ports_trunk_allowed_by_id(const std::string &name, const std::string &portsName, const std::string &vlanid, const PortsTrunkAllowedSchema &allowed) = 0;
    /// <summary>
    /// Update allowed by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: allowed
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="allowed">allowedbody object</param>
    virtual void update_bridge_ports_trunk_allowed_list_by_id(const std::string &name, const std::string &portsName, const std::vector<PortsTrunkAllowedSchema> &allowed) = 0;
    /// <summary>
    /// Update trunk by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: trunk
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="trunk">trunkbody object</param>
    virtual void update_bridge_ports_trunk_by_id(const std::string &name, const std::string &portsName, const PortsTrunkSchema &trunk) = 0;
    /// <summary>
    /// Update nativevlan by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: nativevlan
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="portsName">ID of ports_name</param>
    /// <param name="nativevlan">VLAN that is not tagged in this trunk port</param>
    virtual void update_bridge_ports_trunk_nativevlan_by_id(const std::string &name, const std::string &portsName, const int32_t &nativevlan) = 0;
    /// <summary>
    /// Update address by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: address
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="address">Main MAC address used by the STP</param>
    virtual void update_bridge_stp_address_by_id(const std::string &name, const std::string &vlan, const std::string &address) = 0;
    /// <summary>
    /// Update stp by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="stp">stpbody object</param>
    virtual void update_bridge_stp_by_id(const std::string &name, const std::string &vlan, const StpSchema &stp) = 0;
    /// <summary>
    /// Update forwarddelay by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: forwarddelay
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="forwarddelay">Delay used by STP bridges for port state transition</param>
    virtual void update_bridge_stp_forwarddelay_by_id(const std::string &name, const std::string &vlan, const int32_t &forwarddelay) = 0;
    /// <summary>
    /// Update hellotime by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: hellotime
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="hellotime">Interval between transmissions of BPDU messages</param>
    virtual void update_bridge_stp_hellotime_by_id(const std::string &name, const std::string &vlan, const int32_t &hellotime) = 0;
    /// <summary>
    /// Update stp by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: stp
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="stp">stpbody object</param>
    virtual void update_bridge_stp_list_by_id(const std::string &name, const std::vector<StpSchema> &stp) = 0;
    /// <summary>
    /// Update maxmessageage by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: maxmessageage
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="maxmessageage">Maximum age of a BPDU</param>
    virtual void update_bridge_stp_maxmessageage_by_id(const std::string &name, const std::string &vlan, const int32_t &maxmessageage) = 0;
    /// <summary>
    /// Update priority by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: priority
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="vlan">ID of vlan</param>
    /// <param name="priority">Bridge priority for STP</param>
    virtual void update_bridge_stp_priority_by_id(const std::string &name, const std::string &vlan, const int32_t &priority) = 0;
    /// <summary>
    /// Update stpenabled by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: stpenabled
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="stpenabled">Enable/Disable the STP protocol of the bridge</param>
    virtual void update_bridge_stpenabled_by_id(const std::string &name, const bool &stpenabled) = 0;
    /// <summary>
    /// Update type by ID
    /// </summary>
    /// <remarks>
    /// Update operation of resource: type
    /// </remarks>
    /// <param name="name">ID of name</param>
    /// <param name="type">Type of the Cube (TC, XDP_SKB, XDP_DRV)</param>
    virtual void update_bridge_type_by_id(const std::string &name, const std::string &type) = 0;
};

}
}
}
}

