/**
* nat API
* NAT Service
*
* OpenAPI spec version: 1.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "RuleSnatAppendInputJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

RuleSnatAppendInputJsonObject::RuleSnatAppendInputJsonObject() {

  m_internalNetIsSet = false;

  m_externalIpIsSet = false;
}

RuleSnatAppendInputJsonObject::~RuleSnatAppendInputJsonObject() {}

void RuleSnatAppendInputJsonObject::validateKeys() {

}

void RuleSnatAppendInputJsonObject::validateMandatoryFields() {

  if (!m_internalNetIsSet) {
    throw std::runtime_error("Variable internal-net is required");
  }
  if (!m_externalIpIsSet) {
    throw std::runtime_error("Variable external-ip is required");
  }
}

void RuleSnatAppendInputJsonObject::validateParams() {

  if (m_internalNetIsSet) {
    std::string patter_value = R"PATTERN((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])))PATTERN";
    std::regex e (patter_value);
    if (!std::regex_match(m_internalNet, e))
      throw std::runtime_error("Variable internal-net has not a valid format");
  }
  if (m_externalIpIsSet) {
    std::string patter_value = R"PATTERN((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?)PATTERN";
    std::regex e (patter_value);
    if (!std::regex_match(m_externalIp, e))
      throw std::runtime_error("Variable external-ip has not a valid format");
  }
}

nlohmann::json RuleSnatAppendInputJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  val["internal-net"] = m_internalNet;
  val["external-ip"] = m_externalIp;

  return val;
}

void RuleSnatAppendInputJsonObject::fromJson(nlohmann::json& val) {
  for(nlohmann::json::iterator it = val.begin(); it != val.end(); ++it) {
    std::string key = it.key();
    bool found = (std::find(allowedParameters_.begin(), allowedParameters_.end(), key) != allowedParameters_.end());
    if (!found) {
      throw std::runtime_error(key + " is not a valid parameter");
      return;
    }
  }

  if (val.find("internal-net") != val.end()) {
    setInternalNet(val.at("internal-net"));
  }

  if (val.find("external-ip") != val.end()) {
    setExternalIp(val.at("external-ip"));
  }
}

nlohmann::json RuleSnatAppendInputJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json RuleSnatAppendInputJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["internal-net"]["name"] = "internal-net";
  val["internal-net"]["type"] = "leaf"; // Suppose that type is leaf
  val["internal-net"]["simpletype"] = "string";
  val["internal-net"]["description"] = R"POLYCUBE(Internal IP address (or subnet))POLYCUBE";
  val["internal-net"]["example"] = R"POLYCUBE(10.0.0.0/24 or 10.0.0.1/32)POLYCUBE";
  val["external-ip"]["name"] = "external-ip";
  val["external-ip"]["type"] = "leaf"; // Suppose that type is leaf
  val["external-ip"]["simpletype"] = "string";
  val["external-ip"]["description"] = R"POLYCUBE(Natted source IP address)POLYCUBE";
  val["external-ip"]["example"] = R"POLYCUBE(8.8.8.8)POLYCUBE";

  return val;
}

nlohmann::json RuleSnatAppendInputJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["internal-net"]["name"] = "internal-net";
  val["internal-net"]["simpletype"] = "string";
  val["internal-net"]["description"] = R"POLYCUBE(Internal IP address (or subnet))POLYCUBE";
  val["internal-net"]["example"] = R"POLYCUBE(10.0.0.0/24 or 10.0.0.1/32)POLYCUBE";
  val["external-ip"]["name"] = "external-ip";
  val["external-ip"]["simpletype"] = "string";
  val["external-ip"]["description"] = R"POLYCUBE(Natted source IP address)POLYCUBE";
  val["external-ip"]["example"] = R"POLYCUBE(8.8.8.8)POLYCUBE";

  return val;
}

nlohmann::json RuleSnatAppendInputJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> RuleSnatAppendInputJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string RuleSnatAppendInputJsonObject::getInternalNet() const {
  return m_internalNet;
}

void RuleSnatAppendInputJsonObject::setInternalNet(std::string value) {
  m_internalNet = value;
  m_internalNetIsSet = true;
}

bool RuleSnatAppendInputJsonObject::internalNetIsSet() const {
  return m_internalNetIsSet;
}

void RuleSnatAppendInputJsonObject::unsetInternalNet() {
  m_internalNetIsSet = false;
}



std::string RuleSnatAppendInputJsonObject::getExternalIp() const {
  return m_externalIp;
}

void RuleSnatAppendInputJsonObject::setExternalIp(std::string value) {
  m_externalIp = value;
  m_externalIpIsSet = true;
}

bool RuleSnatAppendInputJsonObject::externalIpIsSet() const {
  return m_externalIpIsSet;
}

void RuleSnatAppendInputJsonObject::unsetExternalIp() {
  m_externalIpIsSet = false;
}




}
}
}
}

