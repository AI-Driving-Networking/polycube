/**
* iptables API
* iptables API generated from iptables.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "ChainStatsJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

ChainStatsJsonObject::ChainStatsJsonObject() {

  m_idIsSet = false;

  m_pktsIsSet = false;

  m_bytesIsSet = false;
}

ChainStatsJsonObject::~ChainStatsJsonObject() {}

void ChainStatsJsonObject::validateKeys() {

  if (!m_idIsSet) {
    throw std::runtime_error("Variable id is required");
  }
}

void ChainStatsJsonObject::validateMandatoryFields() {

}

void ChainStatsJsonObject::validateParams() {

}

nlohmann::json ChainStatsJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_idIsSet) {
    val["id"] = m_id;
  }

  if (m_pktsIsSet) {
    val["pkts"] = m_pkts;
  }

  if (m_bytesIsSet) {
    val["bytes"] = m_bytes;
  }

  if (m_descIsSet) {
    val["description"] = m_desc;
  }

  return val;
}

void ChainStatsJsonObject::fromJson(nlohmann::json& val) {
  for(nlohmann::json::iterator it = val.begin(); it != val.end(); ++it) {
    std::string key = it.key();
    bool found = (std::find(allowedParameters_.begin(), allowedParameters_.end(), key) != allowedParameters_.end());
    if (!found) {
      throw std::runtime_error(key + " is not a valid parameter");
      return;
    }
  }

  if (val.find("id") != val.end()) {
    setId(val.at("id"));
  }

  if (val.find("pkts") != val.end()) {
    setPkts(val.at("pkts"));
  }

  if (val.find("bytes") != val.end()) {
    setBytes(val.at("bytes"));
  }

  if (val.find("description") != val.end()) {
    setDesc(val.at("description"));
  }
}

nlohmann::json ChainStatsJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["id"]["name"] = "id";
  val["id"]["type"] = "key";
  val["id"]["simpletype"] = "integer";
  val["id"]["description"] = R"POLYCUBE(Rule Identifier)POLYCUBE";
  val["id"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json ChainStatsJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["pkts"]["name"] = "pkts";
  val["pkts"]["type"] = "leaf"; // Suppose that type is leaf
  val["pkts"]["simpletype"] = "integer";
  val["pkts"]["description"] = R"POLYCUBE(Number of packets matching the rule)POLYCUBE";
  val["pkts"]["example"] = R"POLYCUBE()POLYCUBE";
  val["bytes"]["name"] = "bytes";
  val["bytes"]["type"] = "leaf"; // Suppose that type is leaf
  val["bytes"]["simpletype"] = "integer";
  val["bytes"]["description"] = R"POLYCUBE(Number of bytes matching the rule)POLYCUBE";
  val["bytes"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json ChainStatsJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json ChainStatsJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> ChainStatsJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

uint32_t ChainStatsJsonObject::getId() const {
  return m_id;
}

void ChainStatsJsonObject::setId(uint32_t value) {
  m_id = value;
  m_idIsSet = true;
}

bool ChainStatsJsonObject::idIsSet() const {
  return m_idIsSet;
}

void ChainStatsJsonObject::unsetId() {
  m_idIsSet = false;
}



uint64_t ChainStatsJsonObject::getPkts() const {
  return m_pkts;
}

void ChainStatsJsonObject::setPkts(uint64_t value) {
  m_pkts = value;
  m_pktsIsSet = true;
}

bool ChainStatsJsonObject::pktsIsSet() const {
  return m_pktsIsSet;
}

void ChainStatsJsonObject::unsetPkts() {
  m_pktsIsSet = false;
}



uint64_t ChainStatsJsonObject::getBytes() const {
  return m_bytes;
}

void ChainStatsJsonObject::setBytes(uint64_t value) {
  m_bytes = value;
  m_bytesIsSet = true;
}

bool ChainStatsJsonObject::bytesIsSet() const {
  return m_bytesIsSet;
}

void ChainStatsJsonObject::unsetBytes() {
  m_bytesIsSet = false;
}

std::string ChainStatsJsonObject::getDesc() const {
  return m_desc;
}

void ChainStatsJsonObject::setDesc(std::string value) {
  m_desc = value;
  m_descIsSet = true;
}

bool ChainStatsJsonObject::descIsSet() const {
  return m_descIsSet;
}

void ChainStatsJsonObject::unsetDesc() {
  m_descIsSet = false;
}

}
}
}
}

