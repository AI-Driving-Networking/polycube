/**
* simpleforwarder API
* Simple Forwarder Base Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */


#include "SimpleforwarderApi.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

SimpleforwarderApi::SimpleforwarderApi() {
  setup_routes();
};

void SimpleforwarderApi::control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) {
  try {
    auto s = router.route(request, response);
    if (s == Rest::Router::Status::NotFound) {
      response.send(Http::Code::Not_Found);
    }
  } catch (const std::exception &e) {
    response.send(polycube::service::Http::Code::Bad_Request, e.what());
  }
}

void SimpleforwarderApi::setup_routes() {
  using namespace polycube::service::Rest;

  Routes::Post(router, base + ":name/actions/:inport/", Routes::bind(&SimpleforwarderApi::create_simpleforwarder_actions_by_id_handler, this));
  Routes::Post(router, base + ":name/actions/", Routes::bind(&SimpleforwarderApi::create_simpleforwarder_actions_list_by_id_handler, this));
  Routes::Post(router, base + ":name/", Routes::bind(&SimpleforwarderApi::create_simpleforwarder_by_id_handler, this));
  Routes::Post(router, base + ":name/ports/:ports_name/", Routes::bind(&SimpleforwarderApi::create_simpleforwarder_ports_by_id_handler, this));
  Routes::Post(router, base + ":name/ports/", Routes::bind(&SimpleforwarderApi::create_simpleforwarder_ports_list_by_id_handler, this));
  Routes::Delete(router, base + ":name/actions/:inport/", Routes::bind(&SimpleforwarderApi::delete_simpleforwarder_actions_by_id_handler, this));
  Routes::Delete(router, base + ":name/actions/", Routes::bind(&SimpleforwarderApi::delete_simpleforwarder_actions_list_by_id_handler, this));
  Routes::Delete(router, base + ":name/", Routes::bind(&SimpleforwarderApi::delete_simpleforwarder_by_id_handler, this));
  Routes::Delete(router, base + ":name/ports/:ports_name/", Routes::bind(&SimpleforwarderApi::delete_simpleforwarder_ports_by_id_handler, this));
  Routes::Delete(router, base + ":name/ports/", Routes::bind(&SimpleforwarderApi::delete_simpleforwarder_ports_list_by_id_handler, this));
  Routes::Get(router, base + ":name/actions/:inport/action/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_actions_action_by_id_handler, this));
  Routes::Get(router, base + ":name/actions/:inport/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_actions_by_id_handler, this));
  Routes::Get(router, base + ":name/actions/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_actions_list_by_id_handler, this));
  Routes::Get(router, base + ":name/actions/:inport/outport/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_actions_outport_by_id_handler, this));
  Routes::Get(router, base + ":name/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_by_id_handler, this));
  Routes::Get(router, base + "", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_list_by_id_handler, this));
  Routes::Get(router, base + ":name/loglevel/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_loglevel_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_ports_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_ports_list_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/peer/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_ports_peer_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/status/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_ports_status_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/uuid/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_ports_uuid_by_id_handler, this));
  Routes::Get(router, base + ":name/type/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_type_by_id_handler, this));
  Routes::Get(router, base + ":name/uuid/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_uuid_by_id_handler, this));
  Routes::Put(router, base + ":name/actions/:inport/", Routes::bind(&SimpleforwarderApi::replace_simpleforwarder_actions_by_id_handler, this));
  Routes::Put(router, base + ":name/actions/", Routes::bind(&SimpleforwarderApi::replace_simpleforwarder_actions_list_by_id_handler, this));
  Routes::Put(router, base + ":name/", Routes::bind(&SimpleforwarderApi::replace_simpleforwarder_by_id_handler, this));
  Routes::Put(router, base + ":name/ports/:ports_name/", Routes::bind(&SimpleforwarderApi::replace_simpleforwarder_ports_by_id_handler, this));
  Routes::Put(router, base + ":name/ports/", Routes::bind(&SimpleforwarderApi::replace_simpleforwarder_ports_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/actions/:inport/action/", Routes::bind(&SimpleforwarderApi::update_simpleforwarder_actions_action_by_id_handler, this));
  Routes::Patch(router, base + ":name/actions/:inport/", Routes::bind(&SimpleforwarderApi::update_simpleforwarder_actions_by_id_handler, this));
  Routes::Patch(router, base + ":name/actions/", Routes::bind(&SimpleforwarderApi::update_simpleforwarder_actions_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/actions/:inport/outport/", Routes::bind(&SimpleforwarderApi::update_simpleforwarder_actions_outport_by_id_handler, this));
  Routes::Patch(router, base + ":name/", Routes::bind(&SimpleforwarderApi::update_simpleforwarder_by_id_handler, this));
  Routes::Patch(router, base + "", Routes::bind(&SimpleforwarderApi::update_simpleforwarder_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/loglevel/", Routes::bind(&SimpleforwarderApi::update_simpleforwarder_loglevel_by_id_handler, this));
  Routes::Patch(router, base + ":name/ports/:ports_name/", Routes::bind(&SimpleforwarderApi::update_simpleforwarder_ports_by_id_handler, this));
  Routes::Patch(router, base + ":name/ports/", Routes::bind(&SimpleforwarderApi::update_simpleforwarder_ports_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/ports/:ports_name/peer/", Routes::bind(&SimpleforwarderApi::update_simpleforwarder_ports_peer_by_id_handler, this));

  Routes::Options(router, base + ":name/actions/:inport/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_actions_by_id_help, this));
  Routes::Options(router, base + ":name/actions/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_actions_list_by_id_help, this));
  Routes::Options(router, base + ":name/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_by_id_help, this));
  Routes::Options(router, base + "", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_list_by_id_help, this));
  Routes::Options(router, base + ":name/ports/:ports_name/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_ports_by_id_help, this));
  Routes::Options(router, base + ":name/ports/", Routes::bind(&SimpleforwarderApi::read_simpleforwarder_ports_list_by_id_help, this));

}

void SimpleforwarderApi::create_simpleforwarder_actions_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto inport = request.param(":inport").as<std::string>();


  try {
    // Getting the body param
    ActionsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setInport(inport);
    value.validateMandatoryFields();
    value.validateParams();
    create_simpleforwarder_actions_by_id(name, inport, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::create_simpleforwarder_actions_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<ActionsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      ActionsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    create_simpleforwarder_actions_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::create_simpleforwarder_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    SimpleforwarderJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(name);
    value.validateMandatoryFields();
    value.validateParams();
    create_simpleforwarder_by_id(name, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::create_simpleforwarder_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    PortsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(portsName);
    value.validateMandatoryFields();
    value.validateParams();
    create_simpleforwarder_ports_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::create_simpleforwarder_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<PortsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      PortsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    create_simpleforwarder_ports_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::delete_simpleforwarder_actions_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto inport = request.param(":inport").as<std::string>();


  try {

    delete_simpleforwarder_actions_by_id(name, inport);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::delete_simpleforwarder_actions_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {

    delete_simpleforwarder_actions_list_by_id(name);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::delete_simpleforwarder_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {

    delete_simpleforwarder_by_id(name);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::delete_simpleforwarder_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {

    delete_simpleforwarder_ports_by_id(name, portsName);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::delete_simpleforwarder_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {

    delete_simpleforwarder_ports_list_by_id(name);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_actions_action_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto inport = request.param(":inport").as<std::string>();


  try {


    auto x = read_simpleforwarder_actions_action_by_id(name, inport);
    nlohmann::json response_body;
    response_body = ActionsJsonObject::ActionsActionEnum_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_actions_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto inport = request.param(":inport").as<std::string>();


  try {


    auto x = read_simpleforwarder_actions_by_id(name, inport);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_actions_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_simpleforwarder_actions_list_by_id(name);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_actions_outport_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto inport = request.param(":inport").as<std::string>();


  try {


    auto x = read_simpleforwarder_actions_outport_by_id(name, inport);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_simpleforwarder_by_id(name);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {


  try {


    auto x = read_simpleforwarder_list_by_id();
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_loglevel_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_simpleforwarder_loglevel_by_id(name);
    nlohmann::json response_body;
    response_body = SimpleforwarderJsonObject::SimpleforwarderLoglevelEnum_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_simpleforwarder_ports_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_simpleforwarder_ports_list_by_id(name);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_ports_peer_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_simpleforwarder_ports_peer_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_ports_status_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_simpleforwarder_ports_status_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = PortsJsonObject::PortsStatusEnum_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_ports_uuid_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_simpleforwarder_ports_uuid_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_type_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_simpleforwarder_type_by_id(name);
    nlohmann::json response_body;
    response_body = SimpleforwarderJsonObject::CubeType_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::read_simpleforwarder_uuid_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_simpleforwarder_uuid_by_id(name);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::replace_simpleforwarder_actions_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto inport = request.param(":inport").as<std::string>();


  try {
    // Getting the body param
    ActionsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setInport(inport);
    value.validateMandatoryFields();
    value.validateParams();
    replace_simpleforwarder_actions_by_id(name, inport, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::replace_simpleforwarder_actions_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<ActionsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      ActionsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    replace_simpleforwarder_actions_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::replace_simpleforwarder_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    SimpleforwarderJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(name);
    value.validateMandatoryFields();
    value.validateParams();
    replace_simpleforwarder_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::replace_simpleforwarder_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    PortsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(portsName);
    value.validateMandatoryFields();
    value.validateParams();
    replace_simpleforwarder_ports_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::replace_simpleforwarder_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<PortsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      PortsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    replace_simpleforwarder_ports_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::update_simpleforwarder_actions_action_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto inport = request.param(":inport").as<std::string>();


  try {
    // Getting the body param
    ActionsActionEnum value_;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value_ = ActionsJsonObject::string_to_ActionsActionEnum(request_body);
    update_simpleforwarder_actions_action_by_id(name, inport, value_);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::update_simpleforwarder_actions_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto inport = request.param(":inport").as<std::string>();


  try {
    // Getting the body param
    ActionsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setInport(inport);
    value.validateParams();
    update_simpleforwarder_actions_by_id(name, inport, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::update_simpleforwarder_actions_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<ActionsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      ActionsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateParams();
      value.push_back(a);
    }
    update_simpleforwarder_actions_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::update_simpleforwarder_actions_outport_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto inport = request.param(":inport").as<std::string>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_simpleforwarder_actions_outport_by_id(name, inport, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::update_simpleforwarder_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    SimpleforwarderJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(name);
    value.validateParams();
    update_simpleforwarder_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::update_simpleforwarder_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {

  // Getting the body param
  std::vector<SimpleforwarderJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      SimpleforwarderJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateParams();
      value.push_back(a);
    }
    update_simpleforwarder_list_by_id(value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::update_simpleforwarder_loglevel_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    SimpleforwarderLoglevelEnum value_;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value_ = SimpleforwarderJsonObject::string_to_SimpleforwarderLoglevelEnum(request_body);
    update_simpleforwarder_loglevel_by_id(name, value_);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::update_simpleforwarder_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    PortsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(portsName);
    value.validateParams();
    update_simpleforwarder_ports_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::update_simpleforwarder_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<PortsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      PortsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateParams();
      value.push_back(a);
    }
    update_simpleforwarder_ports_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void SimpleforwarderApi::update_simpleforwarder_ports_peer_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_simpleforwarder_ports_peer_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}

void SimpleforwarderApi::read_simpleforwarder_actions_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto inport = request.param(":inport").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = ActionsJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = ActionsJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = ActionsJsonObject::helpComplexElements();
    val["actions"] = ActionsJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void SimpleforwarderApi::read_simpleforwarder_actions_list_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = ActionsJsonObject::helpKeys();
    val["elements"] = read_simpleforwarder_actions_list_by_id_get_list(name);
  break;

  case HelpType::ADD:
    val["params"] = ActionsJsonObject::helpKeys();
    val["optional-params"] = ActionsJsonObject::helpWritableLeafs();
  break;

  case HelpType::SET:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::DEL:
    val["params"] = ActionsJsonObject::helpKeys();
    val["elements"] = read_simpleforwarder_actions_list_by_id_get_list(name);
  break;

  case HelpType::NONE:
    val["commands"] = {"add", "del", "show"};
    val["params"] = ActionsJsonObject::helpKeys();
    val["elements"] = read_simpleforwarder_actions_list_by_id_get_list(name);
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void SimpleforwarderApi::read_simpleforwarder_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = SimpleforwarderJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = SimpleforwarderJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = SimpleforwarderJsonObject::helpComplexElements();
    val["actions"] = SimpleforwarderJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void SimpleforwarderApi::read_simpleforwarder_list_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = SimpleforwarderJsonObject::helpKeys();
    val["elements"] = read_simpleforwarder_list_by_id_get_list();
  break;

  case HelpType::ADD:
    val["params"] = SimpleforwarderJsonObject::helpKeys();
    val["optional-params"] = SimpleforwarderJsonObject::helpWritableLeafs();
  break;

  case HelpType::SET:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::DEL:
    val["params"] = SimpleforwarderJsonObject::helpKeys();
    val["elements"] = read_simpleforwarder_list_by_id_get_list();
  break;

  case HelpType::NONE:
    val["commands"] = {"add", "del", "show"};
    val["params"] = SimpleforwarderJsonObject::helpKeys();
    val["elements"] = read_simpleforwarder_list_by_id_get_list();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void SimpleforwarderApi::read_simpleforwarder_ports_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = PortsJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = PortsJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = PortsJsonObject::helpComplexElements();
    val["actions"] = PortsJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void SimpleforwarderApi::read_simpleforwarder_ports_list_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = PortsJsonObject::helpKeys();
    val["elements"] = read_simpleforwarder_ports_list_by_id_get_list(name);
  break;

  case HelpType::ADD:
    val["params"] = PortsJsonObject::helpKeys();
    val["optional-params"] = PortsJsonObject::helpWritableLeafs();
  break;

  case HelpType::SET:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::DEL:
    val["params"] = PortsJsonObject::helpKeys();
    val["elements"] = read_simpleforwarder_ports_list_by_id_get_list(name);
  break;

  case HelpType::NONE:
    val["commands"] = {"add", "del", "show"};
    val["params"] = PortsJsonObject::helpKeys();
    val["elements"] = read_simpleforwarder_ports_list_by_id_get_list(name);
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}



}
}
}
}

