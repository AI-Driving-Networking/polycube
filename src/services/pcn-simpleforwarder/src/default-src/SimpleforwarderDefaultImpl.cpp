/**
* simpleforwarder API
* Simple Forwarder Base Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


// These methods have a default implementation. Your are free to keep it or add your own


#include "../Simpleforwarder.h"




std::string Simpleforwarder::getName(){
  // This method retrieves the name value.
  return Cube::get_name();
}


std::string Simpleforwarder::getUuid(){
  // This method retrieves the uuid value.
  return Cube::get_uuid().str();
}


CubeType Simpleforwarder::getType(){
  // This method retrieves the type value.
  return Cube::get_type();
}


SimpleforwarderLoglevelEnum Simpleforwarder::getLoglevel(){
  // This method retrieves the loglevel value.
    switch(Cube::get_log_level()){
      case polycube::LogLevel::TRACE:
        return SimpleforwarderLoglevelEnum::TRACE;
      case polycube::LogLevel::DEBUG:
        return SimpleforwarderLoglevelEnum::DEBUG;
      case polycube::LogLevel::INFO:
        return SimpleforwarderLoglevelEnum::INFO;
      case polycube::LogLevel::WARN:
        return SimpleforwarderLoglevelEnum::WARN;
      case polycube::LogLevel::ERR:
        return SimpleforwarderLoglevelEnum::ERR;
      case polycube::LogLevel::CRITICAL:
        return SimpleforwarderLoglevelEnum::CRITICAL;
      case polycube::LogLevel::OFF:
        return SimpleforwarderLoglevelEnum::OFF;
    }
}

void Simpleforwarder::setLoglevel(const SimpleforwarderLoglevelEnum &value){
  // This method sets the loglevel value.
    switch(value){
      case SimpleforwarderLoglevelEnum::TRACE:
        Cube::set_log_level(polycube::LogLevel::TRACE);
        break;
      case SimpleforwarderLoglevelEnum::DEBUG:
        Cube::set_log_level(polycube::LogLevel::DEBUG);
        break;
      case SimpleforwarderLoglevelEnum::INFO:
        Cube::set_log_level(polycube::LogLevel::INFO);
        break;
      case SimpleforwarderLoglevelEnum::WARN:
        Cube::set_log_level(polycube::LogLevel::WARN);
        break;
      case SimpleforwarderLoglevelEnum::ERR:
        Cube::set_log_level(polycube::LogLevel::ERR);
        break;
      case SimpleforwarderLoglevelEnum::CRITICAL:
        Cube::set_log_level(polycube::LogLevel::CRITICAL);
        break;
      case SimpleforwarderLoglevelEnum::OFF:
        Cube::set_log_level(polycube::LogLevel::OFF);
        break;
    }
}

std::shared_ptr<Ports> Simpleforwarder::getPorts(const std::string &name){
  return Ports::getEntry(*this, name);
}

std::vector<std::shared_ptr<Ports>> Simpleforwarder::getPortsList(){
  return Ports::get(*this);
}

void Simpleforwarder::addPorts(const std::string &name, const PortsJsonObject &conf){
  Ports::create(*this, name, conf);
}

void Simpleforwarder::addPortsList(const std::vector<PortsJsonObject> &conf){
  for(auto &i : conf){
    std::string name_ = i.getName();
    Ports::create(*this, name_,  i);
  }
}

void Simpleforwarder::replacePorts(const std::string &name, const PortsJsonObject &conf){
  Ports::removeEntry(*this, name);
  std::string name_ = conf.getName();
  Ports::create(*this, name_, conf);

}

void Simpleforwarder::delPorts(const std::string &name){
  Ports::removeEntry(*this, name);
}

void Simpleforwarder::delPortsList(){
  Ports::remove(*this);
}

std::shared_ptr<Actions> Simpleforwarder::getActions(const std::string &inport){
  return Actions::getEntry(*this, inport);
}

std::vector<std::shared_ptr<Actions>> Simpleforwarder::getActionsList(){
  return Actions::get(*this);
}

void Simpleforwarder::addActions(const std::string &inport, const ActionsJsonObject &conf){
  Actions::create(*this, inport, conf);
}

void Simpleforwarder::addActionsList(const std::vector<ActionsJsonObject> &conf){
  for(auto &i : conf){
    std::string inport_ = i.getInport();
    Actions::create(*this, inport_,  i);
  }
}

void Simpleforwarder::replaceActions(const std::string &inport, const ActionsJsonObject &conf){
  Actions::removeEntry(*this, inport);
  std::string inport_ = conf.getInport();
  Actions::create(*this, inport_, conf);

}

void Simpleforwarder::delActions(const std::string &inport){
  Actions::removeEntry(*this, inport);
}

void Simpleforwarder::delActionsList(){
  Actions::remove(*this);
}



