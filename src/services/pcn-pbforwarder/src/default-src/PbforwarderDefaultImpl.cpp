/**
* pbforwarder API
* Policy-Based Forwarder Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


// These methods have a default implementation. Your are free to keep it or add your own


#include "../Pbforwarder.h"




std::string Pbforwarder::getName(){
  // This method retrieves the name value.
  return Cube::get_name();
}


std::string Pbforwarder::getUuid(){
  // This method retrieves the uuid value.
  return Cube::get_uuid().str();
}


CubeType Pbforwarder::getType(){
  // This method retrieves the type value.
  return Cube::get_type();
}


PbforwarderLoglevelEnum Pbforwarder::getLoglevel(){
  // This method retrieves the loglevel value.
    switch(Cube::get_log_level()){
      case polycube::LogLevel::TRACE:
        return PbforwarderLoglevelEnum::TRACE;
      case polycube::LogLevel::DEBUG:
        return PbforwarderLoglevelEnum::DEBUG;
      case polycube::LogLevel::INFO:
        return PbforwarderLoglevelEnum::INFO;
      case polycube::LogLevel::WARN:
        return PbforwarderLoglevelEnum::WARN;
      case polycube::LogLevel::ERR:
        return PbforwarderLoglevelEnum::ERR;
      case polycube::LogLevel::CRITICAL:
        return PbforwarderLoglevelEnum::CRITICAL;
      case polycube::LogLevel::OFF:
        return PbforwarderLoglevelEnum::OFF;
    }
}

void Pbforwarder::setLoglevel(const PbforwarderLoglevelEnum &value){
  // This method sets the loglevel value.
    switch(value){
      case PbforwarderLoglevelEnum::TRACE:
        Cube::set_log_level(polycube::LogLevel::TRACE);
        break;
      case PbforwarderLoglevelEnum::DEBUG:
        Cube::set_log_level(polycube::LogLevel::DEBUG);
        break;
      case PbforwarderLoglevelEnum::INFO:
        Cube::set_log_level(polycube::LogLevel::INFO);
        break;
      case PbforwarderLoglevelEnum::WARN:
        Cube::set_log_level(polycube::LogLevel::WARN);
        break;
      case PbforwarderLoglevelEnum::ERR:
        Cube::set_log_level(polycube::LogLevel::ERR);
        break;
      case PbforwarderLoglevelEnum::CRITICAL:
        Cube::set_log_level(polycube::LogLevel::CRITICAL);
        break;
      case PbforwarderLoglevelEnum::OFF:
        Cube::set_log_level(polycube::LogLevel::OFF);
        break;
    }
}

std::shared_ptr<Ports> Pbforwarder::getPorts(const std::string &name){
  return Ports::getEntry(*this, name);
}

std::vector<std::shared_ptr<Ports>> Pbforwarder::getPortsList(){
  return Ports::get(*this);
}

void Pbforwarder::addPorts(const std::string &name, const PortsJsonObject &conf){
  Ports::create(*this, name, conf);
}

void Pbforwarder::addPortsList(const std::vector<PortsJsonObject> &conf){
  for(auto &i : conf){
    std::string name_ = i.getName();
    Ports::create(*this, name_,  i);
  }
}

void Pbforwarder::replacePorts(const std::string &name, const PortsJsonObject &conf){
  Ports::removeEntry(*this, name);
  std::string name_ = conf.getName();
  Ports::create(*this, name_, conf);

}

void Pbforwarder::delPorts(const std::string &name){
  Ports::removeEntry(*this, name);
}

void Pbforwarder::delPortsList(){
  Ports::remove(*this);
}

std::shared_ptr<Rules> Pbforwarder::getRules(const uint32_t &id){
  return Rules::getEntry(*this, id);
}

std::vector<std::shared_ptr<Rules>> Pbforwarder::getRulesList(){
  return Rules::get(*this);
}

void Pbforwarder::addRules(const uint32_t &id, const RulesJsonObject &conf){
  Rules::create(*this, id, conf);
}

void Pbforwarder::addRulesList(const std::vector<RulesJsonObject> &conf){
  for(auto &i : conf){
    uint32_t id_ = i.getId();
    Rules::create(*this, id_,  i);
  }
}

void Pbforwarder::replaceRules(const uint32_t &id, const RulesJsonObject &conf){
  Rules::removeEntry(*this, id);
  uint32_t id_ = conf.getId();
  Rules::create(*this, id_, conf);

}

void Pbforwarder::delRules(const uint32_t &id){
  Rules::removeEntry(*this, id);
}

void Pbforwarder::delRulesList(){
  Rules::remove(*this);
}



