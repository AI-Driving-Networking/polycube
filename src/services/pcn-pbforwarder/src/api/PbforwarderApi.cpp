/**
* pbforwarder API
* Policy-Based Forwarder Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */


#include "PbforwarderApi.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

PbforwarderApi::PbforwarderApi() {
  setup_routes();
};

void PbforwarderApi::control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) {
  try {
    auto s = router.route(request, response);
    if (s == Rest::Router::Status::NotFound) {
      response.send(Http::Code::Not_Found);
    }
  } catch (const std::exception &e) {
    response.send(polycube::service::Http::Code::Bad_Request, e.what());
  }
}

void PbforwarderApi::setup_routes() {
  using namespace polycube::service::Rest;

  Routes::Post(router, base + ":name/", Routes::bind(&PbforwarderApi::create_pbforwarder_by_id_handler, this));
  Routes::Post(router, base + ":name/ports/:ports_name/", Routes::bind(&PbforwarderApi::create_pbforwarder_ports_by_id_handler, this));
  Routes::Post(router, base + ":name/ports/", Routes::bind(&PbforwarderApi::create_pbforwarder_ports_list_by_id_handler, this));
  Routes::Post(router, base + ":name/rules/:id/", Routes::bind(&PbforwarderApi::create_pbforwarder_rules_by_id_handler, this));
  Routes::Post(router, base + ":name/rules/", Routes::bind(&PbforwarderApi::create_pbforwarder_rules_list_by_id_handler, this));
  Routes::Delete(router, base + ":name/", Routes::bind(&PbforwarderApi::delete_pbforwarder_by_id_handler, this));
  Routes::Delete(router, base + ":name/ports/:ports_name/", Routes::bind(&PbforwarderApi::delete_pbforwarder_ports_by_id_handler, this));
  Routes::Delete(router, base + ":name/ports/", Routes::bind(&PbforwarderApi::delete_pbforwarder_ports_list_by_id_handler, this));
  Routes::Delete(router, base + ":name/rules/:id/", Routes::bind(&PbforwarderApi::delete_pbforwarder_rules_by_id_handler, this));
  Routes::Delete(router, base + ":name/rules/", Routes::bind(&PbforwarderApi::delete_pbforwarder_rules_list_by_id_handler, this));
  Routes::Get(router, base + ":name/", Routes::bind(&PbforwarderApi::read_pbforwarder_by_id_handler, this));
  Routes::Get(router, base + "", Routes::bind(&PbforwarderApi::read_pbforwarder_list_by_id_handler, this));
  Routes::Get(router, base + ":name/loglevel/", Routes::bind(&PbforwarderApi::read_pbforwarder_loglevel_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/", Routes::bind(&PbforwarderApi::read_pbforwarder_ports_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/", Routes::bind(&PbforwarderApi::read_pbforwarder_ports_list_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/peer/", Routes::bind(&PbforwarderApi::read_pbforwarder_ports_peer_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/status/", Routes::bind(&PbforwarderApi::read_pbforwarder_ports_status_by_id_handler, this));
  Routes::Get(router, base + ":name/ports/:ports_name/uuid/", Routes::bind(&PbforwarderApi::read_pbforwarder_ports_uuid_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/action/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_action_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/dst_ip/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_dst_ip_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/dst_mac/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_dst_mac_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/dst_port/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_dst_port_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/in_port/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_in_port_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/l4_proto/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_l4_proto_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_list_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/out_port/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_out_port_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/src_ip/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_src_ip_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/src_mac/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_src_mac_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/src_port/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_src_port_by_id_handler, this));
  Routes::Get(router, base + ":name/rules/:id/vlan/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_vlan_by_id_handler, this));
  Routes::Get(router, base + ":name/type/", Routes::bind(&PbforwarderApi::read_pbforwarder_type_by_id_handler, this));
  Routes::Get(router, base + ":name/uuid/", Routes::bind(&PbforwarderApi::read_pbforwarder_uuid_by_id_handler, this));
  Routes::Put(router, base + ":name/", Routes::bind(&PbforwarderApi::replace_pbforwarder_by_id_handler, this));
  Routes::Put(router, base + ":name/ports/:ports_name/", Routes::bind(&PbforwarderApi::replace_pbforwarder_ports_by_id_handler, this));
  Routes::Put(router, base + ":name/ports/", Routes::bind(&PbforwarderApi::replace_pbforwarder_ports_list_by_id_handler, this));
  Routes::Put(router, base + ":name/rules/:id/", Routes::bind(&PbforwarderApi::replace_pbforwarder_rules_by_id_handler, this));
  Routes::Put(router, base + ":name/rules/", Routes::bind(&PbforwarderApi::replace_pbforwarder_rules_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/", Routes::bind(&PbforwarderApi::update_pbforwarder_by_id_handler, this));
  Routes::Patch(router, base + "", Routes::bind(&PbforwarderApi::update_pbforwarder_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/loglevel/", Routes::bind(&PbforwarderApi::update_pbforwarder_loglevel_by_id_handler, this));
  Routes::Patch(router, base + ":name/ports/:ports_name/", Routes::bind(&PbforwarderApi::update_pbforwarder_ports_by_id_handler, this));
  Routes::Patch(router, base + ":name/ports/", Routes::bind(&PbforwarderApi::update_pbforwarder_ports_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/ports/:ports_name/peer/", Routes::bind(&PbforwarderApi::update_pbforwarder_ports_peer_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/action/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_action_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/dst_ip/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_dst_ip_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/dst_mac/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_dst_mac_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/dst_port/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_dst_port_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/in_port/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_in_port_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/l4_proto/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_l4_proto_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_list_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/out_port/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_out_port_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/src_ip/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_src_ip_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/src_mac/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_src_mac_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/src_port/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_src_port_by_id_handler, this));
  Routes::Patch(router, base + ":name/rules/:id/vlan/", Routes::bind(&PbforwarderApi::update_pbforwarder_rules_vlan_by_id_handler, this));

  Routes::Options(router, base + ":name/", Routes::bind(&PbforwarderApi::read_pbforwarder_by_id_help, this));
  Routes::Options(router, base + "", Routes::bind(&PbforwarderApi::read_pbforwarder_list_by_id_help, this));
  Routes::Options(router, base + ":name/ports/:ports_name/", Routes::bind(&PbforwarderApi::read_pbforwarder_ports_by_id_help, this));
  Routes::Options(router, base + ":name/ports/", Routes::bind(&PbforwarderApi::read_pbforwarder_ports_list_by_id_help, this));
  Routes::Options(router, base + ":name/rules/:id/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_by_id_help, this));
  Routes::Options(router, base + ":name/rules/", Routes::bind(&PbforwarderApi::read_pbforwarder_rules_list_by_id_help, this));

}

void PbforwarderApi::create_pbforwarder_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    PbforwarderJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(name);
    value.validateMandatoryFields();
    value.validateParams();
    create_pbforwarder_by_id(name, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::create_pbforwarder_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    PortsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(portsName);
    value.validateMandatoryFields();
    value.validateParams();
    create_pbforwarder_ports_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::create_pbforwarder_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<PortsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      PortsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    create_pbforwarder_ports_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::create_pbforwarder_rules_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    RulesJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setId(id);
    value.validateMandatoryFields();
    value.validateParams();
    create_pbforwarder_rules_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::create_pbforwarder_rules_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<RulesJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      RulesJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    create_pbforwarder_rules_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Created);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::delete_pbforwarder_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {

    delete_pbforwarder_by_id(name);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::delete_pbforwarder_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {

    delete_pbforwarder_ports_by_id(name, portsName);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::delete_pbforwarder_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {

    delete_pbforwarder_ports_list_by_id(name);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::delete_pbforwarder_rules_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {

    delete_pbforwarder_rules_by_id(name, id);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::delete_pbforwarder_rules_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {

    delete_pbforwarder_rules_list_by_id(name);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_pbforwarder_by_id(name);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {


  try {


    auto x = read_pbforwarder_list_by_id();
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_loglevel_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_pbforwarder_loglevel_by_id(name);
    nlohmann::json response_body;
    response_body = PbforwarderJsonObject::PbforwarderLoglevelEnum_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_pbforwarder_ports_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_pbforwarder_ports_list_by_id(name);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_ports_peer_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_pbforwarder_ports_peer_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_ports_status_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_pbforwarder_ports_status_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = PortsJsonObject::PortsStatusEnum_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_ports_uuid_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {


    auto x = read_pbforwarder_ports_uuid_by_id(name, portsName);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_action_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_action_by_id(name, id);
    nlohmann::json response_body;
    response_body = RulesJsonObject::RulesActionEnum_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_by_id(name, id);
    nlohmann::json response_body;
    response_body = x.toJson();
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_dst_ip_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_dst_ip_by_id(name, id);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_dst_mac_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_dst_mac_by_id(name, id);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_dst_port_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_dst_port_by_id(name, id);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_in_port_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_in_port_by_id(name, id);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_l4_proto_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_l4_proto_by_id(name, id);
    nlohmann::json response_body;
    response_body = RulesJsonObject::RulesL4ProtoEnum_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_pbforwarder_rules_list_by_id(name);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_out_port_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_out_port_by_id(name, id);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_src_ip_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_src_ip_by_id(name, id);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_src_mac_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_src_mac_by_id(name, id);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_src_port_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_src_port_by_id(name, id);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_rules_vlan_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {


    auto x = read_pbforwarder_rules_vlan_by_id(name, id);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_type_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_pbforwarder_type_by_id(name);
    nlohmann::json response_body;
    response_body = PbforwarderJsonObject::CubeType_to_string(x);
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::read_pbforwarder_uuid_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {


    auto x = read_pbforwarder_uuid_by_id(name);
    nlohmann::json response_body;
    response_body = x;
    response.send(polycube::service::Http::Code::Ok, response_body.dump(4));

  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::replace_pbforwarder_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    PbforwarderJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(name);
    value.validateMandatoryFields();
    value.validateParams();
    replace_pbforwarder_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::replace_pbforwarder_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    PortsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(portsName);
    value.validateMandatoryFields();
    value.validateParams();
    replace_pbforwarder_ports_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::replace_pbforwarder_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<PortsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      PortsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    replace_pbforwarder_ports_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::replace_pbforwarder_rules_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    RulesJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setId(id);
    value.validateMandatoryFields();
    value.validateParams();
    replace_pbforwarder_rules_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::replace_pbforwarder_rules_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<RulesJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      RulesJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateMandatoryFields();
      a.validateParams();
      value.push_back(a);
    }
    replace_pbforwarder_rules_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    PbforwarderJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(name);
    value.validateParams();
    update_pbforwarder_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {

  // Getting the body param
  std::vector<PbforwarderJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      PbforwarderJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateParams();
      value.push_back(a);
    }
    update_pbforwarder_list_by_id(value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_loglevel_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  try {
    // Getting the body param
    PbforwarderLoglevelEnum value_;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value_ = PbforwarderJsonObject::string_to_PbforwarderLoglevelEnum(request_body);
    update_pbforwarder_loglevel_by_id(name, value_);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_ports_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    PortsJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setName(portsName);
    value.validateParams();
    update_pbforwarder_ports_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_ports_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<PortsJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      PortsJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateParams();
      value.push_back(a);
    }
    update_pbforwarder_ports_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_ports_peer_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_pbforwarder_ports_peer_by_id(name, portsName, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_action_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    RulesActionEnum value_;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value_ = RulesJsonObject::string_to_RulesActionEnum(request_body);
    update_pbforwarder_rules_action_by_id(name, id, value_);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    RulesJsonObject value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value.fromJson(request_body);
    value.setId(id);
    value.validateParams();
    update_pbforwarder_rules_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_dst_ip_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_pbforwarder_rules_dst_ip_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_dst_mac_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_pbforwarder_rules_dst_mac_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_dst_port_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    uint16_t value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_pbforwarder_rules_dst_port_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_in_port_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_pbforwarder_rules_in_port_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_l4_proto_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    RulesL4ProtoEnum value_;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    value_ = RulesJsonObject::string_to_RulesL4ProtoEnum(request_body);
    update_pbforwarder_rules_l4_proto_by_id(name, id, value_);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_list_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();

  // Getting the body param
  std::vector<RulesJsonObject> value;

  try {

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    for (auto &j : request_body) {
      RulesJsonObject a;
      a.fromJson(j);
      a.validateKeys();
      a.validateParams();
      value.push_back(a);
    }
    update_pbforwarder_rules_list_by_id(name, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_out_port_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_pbforwarder_rules_out_port_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_src_ip_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_pbforwarder_rules_src_ip_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_src_mac_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    std::string value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_pbforwarder_rules_src_mac_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_src_port_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    uint16_t value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_pbforwarder_rules_src_port_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}
void PbforwarderApi::update_pbforwarder_rules_vlan_by_id_handler(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  try {
    // Getting the body param
    uint32_t value;

    nlohmann::json request_body = nlohmann::json::parse(request.body());
    // The conversion is done automatically by the json library
    value = request_body;
    update_pbforwarder_rules_vlan_by_id(name, id, value);
    response.send(polycube::service::Http::Code::Ok);
  } catch(const std::exception &e) {
    response.send(polycube::service::Http::Code::Internal_Server_Error, e.what());
  }
}

void PbforwarderApi::read_pbforwarder_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = PbforwarderJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = PbforwarderJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = PbforwarderJsonObject::helpComplexElements();
    val["actions"] = PbforwarderJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void PbforwarderApi::read_pbforwarder_list_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = PbforwarderJsonObject::helpKeys();
    val["elements"] = read_pbforwarder_list_by_id_get_list();
  break;

  case HelpType::ADD:
    val["params"] = PbforwarderJsonObject::helpKeys();
    val["optional-params"] = PbforwarderJsonObject::helpWritableLeafs();
  break;

  case HelpType::SET:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::DEL:
    val["params"] = PbforwarderJsonObject::helpKeys();
    val["elements"] = read_pbforwarder_list_by_id_get_list();
  break;

  case HelpType::NONE:
    val["commands"] = {"add", "del", "show"};
    val["params"] = PbforwarderJsonObject::helpKeys();
    val["elements"] = read_pbforwarder_list_by_id_get_list();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void PbforwarderApi::read_pbforwarder_ports_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto portsName = request.param(":ports_name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = PortsJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = PortsJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = PortsJsonObject::helpComplexElements();
    val["actions"] = PortsJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void PbforwarderApi::read_pbforwarder_ports_list_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = PortsJsonObject::helpKeys();
    val["elements"] = read_pbforwarder_ports_list_by_id_get_list(name);
  break;

  case HelpType::ADD:
    val["params"] = PortsJsonObject::helpKeys();
    val["optional-params"] = PortsJsonObject::helpWritableLeafs();
  break;

  case HelpType::SET:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::DEL:
    val["params"] = PortsJsonObject::helpKeys();
    val["elements"] = read_pbforwarder_ports_list_by_id_get_list(name);
  break;

  case HelpType::NONE:
    val["commands"] = {"add", "del", "show"};
    val["params"] = PortsJsonObject::helpKeys();
    val["elements"] = read_pbforwarder_ports_list_by_id_get_list(name);
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void PbforwarderApi::read_pbforwarder_rules_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();
  auto id = request.param(":id").as<uint32_t>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = RulesJsonObject::helpElements();
  break;

  case HelpType::ADD:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::SET:
    val["params"] = RulesJsonObject::helpWritableLeafs();
  break;

  case HelpType::DEL:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::NONE:
    val["commands"] = {"set", "show"};
    val["params"] = RulesJsonObject::helpComplexElements();
    val["actions"] = RulesJsonObject::helpActions();
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}

void PbforwarderApi::read_pbforwarder_rules_list_by_id_help(
  const polycube::service::Rest::Request &request,
  polycube::service::HttpHandleResponse &response) {
  // Getting the path params
  auto name = request.param(":name").as<std::string>();


  using polycube::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    val["params"] = RulesJsonObject::helpKeys();
    val["elements"] = read_pbforwarder_rules_list_by_id_get_list(name);
  break;

  case HelpType::ADD:
    val["params"] = RulesJsonObject::helpKeys();
    val["optional-params"] = RulesJsonObject::helpWritableLeafs();
  break;

  case HelpType::SET:
    response.send(polycube::service::Http::Code::Bad_Request);
  return;

  case HelpType::DEL:
    val["params"] = RulesJsonObject::helpKeys();
    val["elements"] = read_pbforwarder_rules_list_by_id_get_list(name);
  break;

  case HelpType::NONE:
    val["commands"] = {"add", "del", "show"};
    val["params"] = RulesJsonObject::helpKeys();
    val["elements"] = read_pbforwarder_rules_list_by_id_get_list(name);
  break;

  case HelpType::NO_HELP:
    response.send(polycube::service::Http::Code::Bad_Request);
    return;
  }
  response.send(polycube::service::Http::Code::Ok, val.dump(4));
}



}
}
}
}

