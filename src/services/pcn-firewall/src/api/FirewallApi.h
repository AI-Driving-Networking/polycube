/**
* firewall API
* Firewall Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* FirewallApi.h
*
*/

#pragma once

#define POLYCUBE_SERVICE_NAME "firewall"


#include <polycube/services/http_router.h>
#include <polycube/services/management_interface.h>
#include <vector>

#include "ChainJsonObject.h"
#include "ChainAppendInputJsonObject.h"
#include "ChainAppendOutputJsonObject.h"
#include "ChainApplyRulesOutputJsonObject.h"
#include "ChainResetCountersOutputJsonObject.h"
#include "ChainRuleJsonObject.h"
#include "ChainStatsJsonObject.h"
#include "FirewallJsonObject.h"
#include "PortsJsonObject.h"
#include "SessionTableJsonObject.h"
#include <vector>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;
using namespace polycube::service;

class  FirewallApi : public ManagementInterface {
 public:
  FirewallApi();
  virtual ~FirewallApi() {};

  const std::string base = "/" + std::string(POLYCUBE_SERVICE_NAME) + "/";

 protected:
  void setup_routes();
  void control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) override;

  void create_firewall_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_chain_append_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_chain_apply_rules_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_chain_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_chain_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_chain_reset_counters_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_chain_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_chain_rule_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_firewall_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_firewall_chain_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_firewall_chain_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_firewall_chain_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_firewall_chain_rule_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_firewall_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_firewall_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_accept_established_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_default_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_action_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_conntrack_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_description_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_dport_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_dst_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_l4proto_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_sport_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_src_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_tcpflags_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_action_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_bytes_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_conntrack_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_description_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_dport_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_dst_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_l4proto_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_pkts_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_sport_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_src_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_tcpflags_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_conntrack_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_egress_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_ingress_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_interactive_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_loglevel_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_ports_peer_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_ports_status_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_ports_uuid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_session_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_session_table_eta_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_session_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_session_table_state_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_uuid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_firewall_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_firewall_chain_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_firewall_chain_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_firewall_chain_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_firewall_chain_rule_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_firewall_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_firewall_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_accept_established_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_chain_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_chain_default_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_chain_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_chain_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_chain_rule_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_conntrack_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_egress_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_ingress_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_interactive_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_loglevel_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_ports_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_ports_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_firewall_ports_peer_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);

  void read_firewall_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_rule_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_chain_stats_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_ports_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_ports_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_session_table_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_firewall_session_table_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);

  void create_firewall_chain_append_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_chain_apply_rules_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_firewall_chain_reset_counters_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);

  polycube::service::Rest::Router router;

  /// <summary>
  /// Create firewall by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: firewall
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">firewallbody object</param>
  virtual void create_firewall_by_id(const std::string &name, const FirewallJsonObject &value) = 0;
  /// <summary>
  /// Create append by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: append
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="value">appendbody object</param>
  virtual ChainAppendOutputJsonObject create_firewall_chain_append_by_id(const std::string &name, const ChainNameEnum &chainName, const ChainAppendInputJsonObject &value) = 0;
  /// <summary>
  /// Create apply-rules by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: apply-rules
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  virtual ChainApplyRulesOutputJsonObject create_firewall_chain_apply_rules_by_id(const std::string &name, const ChainNameEnum &chainName) = 0;
  /// <summary>
  /// Create chain by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: chain
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="value">chainbody object</param>
  virtual void create_firewall_chain_by_id(const std::string &name, const ChainNameEnum &chainName, const ChainJsonObject &value) = 0;
  /// <summary>
  /// Create chain by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: chain
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">chainbody object</param>
  virtual void create_firewall_chain_list_by_id(const std::string &name, const std::vector<ChainJsonObject> &value) = 0;
  /// <summary>
  /// Create reset-counters by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: reset-counters
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  virtual ChainResetCountersOutputJsonObject create_firewall_chain_reset_counters_by_id(const std::string &name, const ChainNameEnum &chainName) = 0;
  /// <summary>
  /// Create rule by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">rulebody object</param>
  virtual void create_firewall_chain_rule_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id, const ChainRuleJsonObject &value) = 0;
  /// <summary>
  /// Create rule by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="value">rulebody object</param>
  virtual void create_firewall_chain_rule_list_by_id(const std::string &name, const ChainNameEnum &chainName, const std::vector<ChainRuleJsonObject> &value) = 0;
  /// <summary>
  /// Create ports by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">portsbody object</param>
  virtual void create_firewall_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) = 0;
  /// <summary>
  /// Create ports by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">portsbody object</param>
  virtual void create_firewall_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) = 0;
  /// <summary>
  /// Delete firewall by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: firewall
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_firewall_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete chain by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: chain
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  virtual void delete_firewall_chain_by_id(const std::string &name, const ChainNameEnum &chainName) = 0;
  /// <summary>
  /// Delete chain by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: chain
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_firewall_chain_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete rule by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual void delete_firewall_chain_rule_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Delete rule by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  virtual void delete_firewall_chain_rule_list_by_id(const std::string &name, const ChainNameEnum &chainName) = 0;
  /// <summary>
  /// Delete ports by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual void delete_firewall_ports_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Delete ports by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_firewall_ports_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read accept-established by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: accept-established
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual FirewallAcceptEstablishedEnum read_firewall_accept_established_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read firewall by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: firewall
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual FirewallJsonObject read_firewall_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read chain by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: chain
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  virtual ChainJsonObject read_firewall_chain_by_id(const std::string &name, const ChainNameEnum &chainName) = 0;
  /// <summary>
  /// Read default by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: default
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  virtual ActionEnum read_firewall_chain_default_by_id(const std::string &name, const ChainNameEnum &chainName) = 0;
  /// <summary>
  /// Read chain by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: chain
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<ChainJsonObject> read_firewall_chain_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_firewall_chain_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read action by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: action
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual ActionEnum read_firewall_chain_rule_action_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read rule by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual ChainRuleJsonObject read_firewall_chain_rule_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read conntrack by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: conntrack
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual ConntrackstatusEnum read_firewall_chain_rule_conntrack_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read description by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: description
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_firewall_chain_rule_description_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read dport by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: dport
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual uint16_t read_firewall_chain_rule_dport_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read dst by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: dst
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_firewall_chain_rule_dst_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read l4proto by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: l4proto
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_firewall_chain_rule_l4proto_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read rule by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  virtual std::vector<ChainRuleJsonObject> read_firewall_chain_rule_list_by_id(const std::string &name, const ChainNameEnum &chainName) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_firewall_chain_rule_list_by_id_get_list(const std::string &name, const ChainNameEnum &chainName) = 0;
  /// <summary>
  /// Read sport by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: sport
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual uint16_t read_firewall_chain_rule_sport_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read src by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: src
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_firewall_chain_rule_src_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read tcpflags by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: tcpflags
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_firewall_chain_rule_tcpflags_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read action by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: action
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual ActionEnum read_firewall_chain_stats_action_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read stats by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: stats
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual ChainStatsJsonObject read_firewall_chain_stats_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read bytes by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: bytes
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual uint64_t read_firewall_chain_stats_bytes_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read conntrack by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: conntrack
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual ConntrackstatusEnum read_firewall_chain_stats_conntrack_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read description by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: description
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_firewall_chain_stats_description_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read dport by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: dport
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual uint16_t read_firewall_chain_stats_dport_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read dst by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: dst
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_firewall_chain_stats_dst_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read l4proto by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: l4proto
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_firewall_chain_stats_l4proto_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read stats by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: stats
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  virtual std::vector<ChainStatsJsonObject> read_firewall_chain_stats_list_by_id(const std::string &name, const ChainNameEnum &chainName) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_firewall_chain_stats_list_by_id_get_list(const std::string &name, const ChainNameEnum &chainName) = 0;
  /// <summary>
  /// Read pkts by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: pkts
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual uint64_t read_firewall_chain_stats_pkts_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read sport by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: sport
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual uint16_t read_firewall_chain_stats_sport_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read src by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: src
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_firewall_chain_stats_src_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read tcpflags by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: tcpflags
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_firewall_chain_stats_tcpflags_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id) = 0;
  /// <summary>
  /// Read conntrack by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: conntrack
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual FirewallConntrackEnum read_firewall_conntrack_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read egress-port by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: egress-port
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_firewall_egress_port_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read ingress-port by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: ingress-port
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_firewall_ingress_port_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read interactive by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: interactive
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual bool read_firewall_interactive_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read firewall by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: firewall
  /// </remarks>
  virtual std::vector<FirewallJsonObject> read_firewall_list_by_id() = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_firewall_list_by_id_get_list() = 0;
  /// <summary>
  /// Read loglevel by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: loglevel
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual FirewallLoglevelEnum read_firewall_loglevel_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read ports by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual PortsJsonObject read_firewall_ports_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read ports by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<PortsJsonObject> read_firewall_ports_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_firewall_ports_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read peer by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: peer
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual std::string read_firewall_ports_peer_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read status by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: status
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual PortsStatusEnum read_firewall_ports_status_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read uuid by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: uuid
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  virtual std::string read_firewall_ports_uuid_by_id(const std::string &name, const std::string &portsName) = 0;
  /// <summary>
  /// Read session-table by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: session-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="src">ID of src</param>
  /// <param name="dst">ID of dst</param>
  /// <param name="l4proto">ID of l4proto</param>
  /// <param name="sport">ID of sport</param>
  /// <param name="dport">ID of dport</param>
  virtual SessionTableJsonObject read_firewall_session_table_by_id(const std::string &name, const std::string &src, const std::string &dst, const std::string &l4proto, const uint16_t &sport, const uint16_t &dport) = 0;
  /// <summary>
  /// Read eta by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: eta
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="src">ID of src</param>
  /// <param name="dst">ID of dst</param>
  /// <param name="l4proto">ID of l4proto</param>
  /// <param name="sport">ID of sport</param>
  /// <param name="dport">ID of dport</param>
  virtual uint32_t read_firewall_session_table_eta_by_id(const std::string &name, const std::string &src, const std::string &dst, const std::string &l4proto, const uint16_t &sport, const uint16_t &dport) = 0;
  /// <summary>
  /// Read session-table by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: session-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<SessionTableJsonObject> read_firewall_session_table_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_firewall_session_table_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read state by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: state
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="src">ID of src</param>
  /// <param name="dst">ID of dst</param>
  /// <param name="l4proto">ID of l4proto</param>
  /// <param name="sport">ID of sport</param>
  /// <param name="dport">ID of dport</param>
  virtual std::string read_firewall_session_table_state_by_id(const std::string &name, const std::string &src, const std::string &dst, const std::string &l4proto, const uint16_t &sport, const uint16_t &dport) = 0;
  /// <summary>
  /// Read type by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: type
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual CubeType read_firewall_type_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read uuid by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: uuid
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_firewall_uuid_by_id(const std::string &name) = 0;
  /// <summary>
  /// Replace firewall by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: firewall
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">firewallbody object</param>
  virtual void replace_firewall_by_id(const std::string &name, const FirewallJsonObject &value) = 0;
  /// <summary>
  /// Replace chain by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: chain
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="value">chainbody object</param>
  virtual void replace_firewall_chain_by_id(const std::string &name, const ChainNameEnum &chainName, const ChainJsonObject &value) = 0;
  /// <summary>
  /// Replace chain by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: chain
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">chainbody object</param>
  virtual void replace_firewall_chain_list_by_id(const std::string &name, const std::vector<ChainJsonObject> &value) = 0;
  /// <summary>
  /// Replace rule by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">rulebody object</param>
  virtual void replace_firewall_chain_rule_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id, const ChainRuleJsonObject &value) = 0;
  /// <summary>
  /// Replace rule by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="value">rulebody object</param>
  virtual void replace_firewall_chain_rule_list_by_id(const std::string &name, const ChainNameEnum &chainName, const std::vector<ChainRuleJsonObject> &value) = 0;
  /// <summary>
  /// Replace ports by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">portsbody object</param>
  virtual void replace_firewall_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) = 0;
  /// <summary>
  /// Replace ports by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">portsbody object</param>
  virtual void replace_firewall_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) = 0;
  /// <summary>
  /// Update accept-established by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: accept-established
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">If Connection Tracking is enabled, all packets belonging to ESTABLISHED connections will be forwarded automatically. Default is ON.</param>
  virtual void update_firewall_accept_established_by_id(const std::string &name, const FirewallAcceptEstablishedEnum &value) = 0;
  /// <summary>
  /// Update firewall by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: firewall
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">firewallbody object</param>
  virtual void update_firewall_by_id(const std::string &name, const FirewallJsonObject &value) = 0;
  /// <summary>
  /// Update chain by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: chain
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="value">chainbody object</param>
  virtual void update_firewall_chain_by_id(const std::string &name, const ChainNameEnum &chainName, const ChainJsonObject &value) = 0;
  /// <summary>
  /// Update default by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: default
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="value">Default action if no rule matches in the ingress chain. Default is DROP.</param>
  virtual void update_firewall_chain_default_by_id(const std::string &name, const ChainNameEnum &chainName, const ActionEnum &value) = 0;
  /// <summary>
  /// Update chain by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: chain
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">chainbody object</param>
  virtual void update_firewall_chain_list_by_id(const std::string &name, const std::vector<ChainJsonObject> &value) = 0;
  /// <summary>
  /// Update rule by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">rulebody object</param>
  virtual void update_firewall_chain_rule_by_id(const std::string &name, const ChainNameEnum &chainName, const uint32_t &id, const ChainRuleJsonObject &value) = 0;
  /// <summary>
  /// Update rule by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="chainName">ID of chain_name</param>
  /// <param name="value">rulebody object</param>
  virtual void update_firewall_chain_rule_list_by_id(const std::string &name, const ChainNameEnum &chainName, const std::vector<ChainRuleJsonObject> &value) = 0;
  /// <summary>
  /// Update conntrack by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: conntrack
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Enables the Connection Tracking module. Mandatory if connection tracking rules are needed. Default is ON.</param>
  virtual void update_firewall_conntrack_by_id(const std::string &name, const FirewallConntrackEnum &value) = 0;
  /// <summary>
  /// Update egress-port by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: egress-port
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Name for the egress port, from which arrives traffic processed by EGRESS chain (by default it&#39;s the second port of the cube)</param>
  virtual void update_firewall_egress_port_by_id(const std::string &name, const std::string &value) = 0;
  /// <summary>
  /// Update ingress-port by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: ingress-port
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Name for the ingress port, from which arrives traffic processed by INGRESS chain (by default it&#39;s the first port of the cube)</param>
  virtual void update_firewall_ingress_port_by_id(const std::string &name, const std::string &value) = 0;
  /// <summary>
  /// Update interactive by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: interactive
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Interactive mode applies new rules immediately; if &#39;false&#39;, the command &#39;apply-rules&#39; has to be used to apply all the rules at once. Default is TRUE.</param>
  virtual void update_firewall_interactive_by_id(const std::string &name, const bool &value) = 0;
  /// <summary>
  /// Update firewall by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: firewall
  /// </remarks>
  /// <param name="value">firewallbody object</param>
  virtual void update_firewall_list_by_id(const std::vector<FirewallJsonObject> &value) = 0;
  /// <summary>
  /// Update loglevel by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: loglevel
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)</param>
  virtual void update_firewall_loglevel_by_id(const std::string &name, const FirewallLoglevelEnum &value) = 0;
  /// <summary>
  /// Update ports by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">portsbody object</param>
  virtual void update_firewall_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) = 0;
  /// <summary>
  /// Update ports by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: ports
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">portsbody object</param>
  virtual void update_firewall_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) = 0;
  /// <summary>
  /// Update peer by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: peer
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="portsName">ID of ports_name</param>
  /// <param name="value">Peer name, such as a network interfaces (e.g., &#39;veth0&#39;) or another cube (e.g., &#39;br1:port2&#39;)</param>
  virtual void update_firewall_ports_peer_by_id(const std::string &name, const std::string &portsName, const std::string &value) = 0;
};

}
}
}
}

